= Mesa HostMot2 Driver

[[cha:mesa-hostmot2-driver]]

== Introducción

HostMot2 es una configuración FPGA desarrollada por Mesa Electronics para
su línea de tarjetas de control de movimiento 'Anything I/O'. El firmware es de fuente
abierta, portátil y flexible. Se puede configurar (en tiempo de compilación)
con cero o más instancias (objetos creados en tiempo de ejecución) de varios
módulos: codificadores (contadores de cuadratura), generadores PWM y
generadores paso/dir. El firmware se puede configurar (en tiempo de ejecución) para que
conecte cada una de estas instancias a pines en los conectores de E/S. Los pines de E/S
no manejados por una instancia de módulo quedan como E/S digital bidireccional de propósito general.

== Binarios del firmware

.Tarjetas FPGA con conectores de 50 pines

Varios binarios de firmware HostMot2 precompilados están disponibles para
placas Anything I/O diferentes. (Esta lista está incompleta, verifique la
distribución de firmware hostmot2 para listas de firmware actualizadas).

* 3x20 (144 pines de E/S): utilizando el módulo hm2_pci
** 24 canales servo 
** 16 canales servo más 24 generadores de paso/dir

* 5i22 (96 pines de E/S): utilizando el módulo hm2_pci
** 16 canales servo
** 8 canales servo más 24 generadores de paso/dir

* 5i20, 5i23, 4i65, 4i68 (72 pines de E/S): utilizando el módulo hm2_pci
** 12 canales servo
** 8 canales servo más 4 generadores 4 paso/dir
** 4 canales servo más 8 generadores de paso/dir

* 7i43 (48 pines de E/S): utilizando el módulo hm2_7i43
** 8 canales servo (8 generadores PWM y 8 codificadores)
** 4 canales servo más 4 generadores de paso/dir

.tarjetas DB25 FPGA

La tarjeta 5i25 Superport FPGA está preprogramada cuando se compra y no
necesita un firmware binario.

== Instalación de firmware

Dependiendo de cómo se instaló LinuxCNC, es posible que deba abrir el
administrador de paquetes Synaptic desde el menú Sistema e instalar el paquete para su
tarjeta Mesa. La forma más rápida de encontrarlo es hacer una búsqueda de
'hostmot2' en el Administrador de paquetes Synaptic. Marque el firmware para su
instalación, y luego apliquela.

== Cargando HostMot2

El soporte de LinuxCNC para el firmware HostMot2 se divide en un controlador
caricgenérico llamado 'hostmot2' y dos controladores de E/S de bajo nivel para tarjetas
Anything I/O. Los controladores de E/S de bajo nivel son 'hm2_7i43' y 'hm2_pci' (para
todas las placas de E/S Anything basadas en PCI y PC-104/Plus). El controlador hostmot2
debe cargarse primero, usando un comando HAL como este:

----
loadrt hostmot2
----

Consulte la página man del comando hostmot2(9) para obtener más información.

El controlador hostmot2 por sí solo no hace nada, necesita acceso a
placas que ejecutan el firmware HostMot2. Los controladores de E/S de bajo nivel proporcionan
este acceso. Los controladores de E/S de bajo nivel están cargados con comandos como
este:

----
loadrt hm2_pci config="firmware=hm2/5i20/SVST8_4.BIT
       num_encoders=3 num_pwmgens=3 num_stepgens=1 "
----

Los parámetros de configuración se describen en la página man del comando hostmot2.

== Watchdog

El firmware HostMot2 puede incluir un módulo de vigilancia; si lo hace, el
controlador hostmot2 lo usará.

El perro guardián debe ser refrescado por LinuxCNC periódicamente o saltará.
La función de escritura hm2 (ver más abajo) refresca al perro guardián.

Cuando el perro guardián salta, todos los pines de E/S de la placa se desconectan de
sus instancias de módulo y se convierten en entradas de alta impedancia (pulled high).
El estado de los módulos de firmware HostMot2 no se altera (excepto
para la configuración de los pines de E/S). Las instancias de codificador siguen contando
pulsos de cuadratura y los generadores de pasos y pwm siguen generando señales
(que no se transmiten a los motores, porque los pines de E/S se han convertido en
entradas).

Al restablecer el watchdog se restablecen los pines de E/S a la configuración elegida
en tiempo de carga.

Si el firmware incluye un perro guardián, serán exportados los siguientes objetos HAL:

=== Pines:

* 'has_bit' -
     (bit I/O) Verdadero si el perro guardián ha saltado. Falso en caso contrario.
    Si el perro guardián ha saltado y el bit has_bit es True, el usuario puede
    reiniciarlo a Falso para reanudar la operación.

=== Parámetros:

* 'timeout_ns' -
     (u32 lectura/escritura) Tiempo de espera del watchdog, en nanosegundos. Esto es
    inicializado a 5000000 (5 milisegundos) en tiempo de carga del módulo. Si
    pasa más tiempo entre llamadas a la función de escritura hm2, el perro guardián saltará.

== Funciones HostMot2

* 'hm2_<BoardType>.<BoardNum>.read' -
    Lee todas las entradas, actualiza los pines HAL de entrada.

* 'hm2_<BoardType>.<BoardNum>.write' -
    Escribe todas las salidas.

* 'hm2_<BoardType>.<BoardNum>.read_gpio' -
     Lee solo los pines de entrada GPIO. (Esta función
    no está disponible en la 7i43 debido a limitaciones del bus EPP).

* 'hm2_<BoardType>.<BoardNum>.write_gpio' -
     Escribe solo los registros de control GPIO y los pines de salida. (Esta función
    no está disponible en el 7i43 debido a limitaciones del bus EPP).

[NOTA]
=====================================================================
Las funciones 'read_gpio' y 'write_gpio' anteriores no se necesitan
normalmente , ya que los bits GPIO se leen y escriben
con todo lo demás en las funciones estándar 'read' y 'write'
anteriores, que normalmente se ejecutan en el hilo servo.

Las funciones 'read_gpio' y 'write_gpio' se proporcionaron para el
caso de necesitar alguna E/S muy rápida (actualizada con frecuencia). Estas
funciones deben ejecutarse en el hilo base. Si tiene necesidad de
esto, por favor envíe un correo electrónico y cuéntenos al respecto, y cuál es su
aplicación.
=====================================================================

== Pinouts

El controlador hostmot2 no tiene un pinout particular. El pinout
proviene del firmware que el controlador hostmot2 envía a la tarjeta Anything I/O.
Cada firmware tiene un pinout diferente, y el pinout depende de
cuántos codificadores, pwmgens y stepgens disponibles se usan.
Para obtener una lista de pinout para su configuración después de cargar LinuxCNC,
escriba en una ventana de terminal:

----
dmesg > hm2.txt
----

El archivo de texto resultante contendrá mucha información, así como
el pinout para HostMot2 y cualquier mensaje de error y advertencia.

Para reducir el desorden, borre el búfer de mensajes antes de cargar
LinuxCNC escribiendo lo siguiente en la ventana de terminal:

----
sudo dmesg -c
----

Ahora, cuando ejecute LinuxCNC y luego haga un 'dmesg > hm2.txt' en la terminal,
solo la información del momento en que cargó LinuxCNC estará en su archivo
con su pinout. El archivo estará en el directorio actual de la
ventana de terminal. Cada línea contendrá el nombre de la tarjeta, el número de la tarjeta,
el número de pin de E/S, el conector y el pin, y el uso. De aqui,
sabrá las conexiones físicas a su tarjeta basadas en
su configuración

Un ejemplo de una configuración 5i20:

----
[HOSTMOT2]
DRIVER=hm2_pci
BOARD=5i20
CONFIG="firmware=hm2/5i20/SVST8_4.BIT num_encoders=1 num_pwmgens=1 num_stepgens=3"
----

La configuración anterior produjo esta impresión.

----
[ 1141.053386] hm2/hm2_5i20.0: 72 I/O Pins used: 
[ 1141.053394] hm2/hm2_5i20.0: IO Pin 000 (P2-01): IOPort 
[ 1141.053397] hm2/hm2_5i20.0: IO Pin 001 (P2-03): IOPort 
[ 1141.053401] hm2/hm2_5i20.0: IO Pin 002 (P2-05): Encoder #0, pin B (Input) 
[ 1141.053405] hm2/hm2_5i20.0: IO Pin 003 (P2-07): Encoder #0, pin A (Input) 
[ 1141.053408] hm2/hm2_5i20.0: IO Pin 004 (P2-09): IOPort 
[ 1141.053411] hm2/hm2_5i20.0: IO Pin 005 (P2-11): Encoder #0, pin Index (Input) 
[ 1141.053415] hm2/hm2_5i20.0: IO Pin 006 (P2-13): IOPort 
[ 1141.053418] hm2/hm2_5i20.0: IO Pin 007 (P2-15): PWMGen #0, pin Out0 (PWM or Up) (Output) 
[ 1141.053422] hm2/hm2_5i20.0: IO Pin 008 (P2-17): IOPort 
[ 1141.053425] hm2/hm2_5i20.0: IO Pin 009 (P2-19): PWMGen #0, pin Out1 (Dir or Down) (Output) 
[ 1141.053429] hm2/hm2_5i20.0: IO Pin 010 (P2-21): IOPort 
[ 1141.053432] hm2/hm2_5i20.0: IO Pin 011 (P2-23): PWMGen #0, pin Not-Enable (Output) 
<snip>... 
[ 1141.053589] hm2/hm2_5i20.0: IO Pin 060 (P4-25): StepGen #2, pin Step (Output) 
[ 1141.053593] hm2/hm2_5i20.0: IO Pin 061 (P4-27): StepGen #2, pin Direction (Output) 
[ 1141.053597] hm2/hm2_5i20.0: IO Pin 062 (P4-29): StepGen #2, pin (unused) (Output) 
[ 1141.053601] hm2/hm2_5i20.0: IO Pin 063 (P4-31): StepGen #2, pin (unused) (Output) 
[ 1141.053605] hm2/hm2_5i20.0: IO Pin 064 (P4-33): StepGen #2, pin (unused) (Output) 
[ 1141.053609] hm2/hm2_5i20.0: IO Pin 065 (P4-35): StepGen #2, pin (unused) (Output) 
[ 1141.053613] hm2/hm2_5i20.0: IO Pin 066 (P4-37): IOPort 
[ 1141.053616] hm2/hm2_5i20.0: IO Pin 067 (P4-39): IOPort 
[ 1141.053619] hm2/hm2_5i20.0: IO Pin 068 (P4-41): IOPort 
[ 1141.053621] hm2/hm2_5i20.0: IO Pin 069 (P4-43): IOPort 
[ 1141.053624] hm2/hm2_5i20.0: IO Pin 070 (P4-45): IOPort 
[ 1141.053627] hm2/hm2_5i20.0: IO Pin 071 (P4-47): IOPort 
[ 1141.053811] hm2/hm2_5i20.0: registered 
[ 1141.053815] hm2_5i20.0: initialized AnyIO board at 0000:02:02.0
----

[NOTA]
El pin de E/S nnn corresponderá al número de pin que se muestra en
la pantalla de configuración de HAL para GPIO. Algunos de los Stepgen, Encoder
y PWMGen también se mostrarán como GPIO en la pantalla de configuración de HAL.

== Archivos PIN

El pinout predeterminado se describe en un archivo .PIN (texto legible para humanos).
Cuando instala un paquete de firmware, los archivos .PIN se instalan en

----
/usr/share/doc/hostmot2-firmware-<board>/
----

== Firmware

El firmware seleccionado (archivo .BIT) y la configuración se cargan desde
la placa base de la PC a la tarjeta madre Mesa en el inicio de LinuxCNC.
Si está utilizando Run In Place, aún debe instalar el paquete
hostmot2-firmware-<board> . Hay más información sobre
firmware y configuración en la sección 'Configuraciones'.

== Pines HAL

Los pines HAL para cada configuración se pueden ver abriendo 'Mostrar
Configuración HAL' desde el menú Máquina. Todos los pines y parámetros HAL
se pueden encontrar allí. La siguiente figura es de la 
configuración 5i20 utilizada anteriormente.

.5i20 HAL Pins [[cap:5i20-HAL-Pins]]

image::images/5i20-halpins.png[alt="Pines HAL 5i20"]

== Configuraciones

El firmware Hostmot2 está disponible en varias versiones, dependiendo de
lo que esté tratando de lograr. Puede recordar lo que es
un firmware particular mirando el nombre. Veamos un par de ejemplos.

En una 7i43 (dos puertos), SV8 ('Servo 8') sería para tener 8 servos
o menos, utilizando la tarjeta servo 'clásica' 7i33 de 4 ejes (por puerto).
Entonces 8 servos usarían las 48 señales en los dos puertos. Pero si
solo se necesitan 3 servos, podría decir 'num_encoders=3' y 'num_pwmgens=3'
y recuperar 5 servos, a 6 señales cada uno, obteniendo así 30 bits de GPIO.

En una 5i22 (cuatro puertos), SVST8_24 ('Servo 8, Stepper 24') sería
para tener 8 servos o menos (7i33x2 nuevamente) y 24 steppers o menos
(7i47x2). Esto usaría los cuatro puertos.
Si solo se necesitara 4 servos, podría decir 'num_encoders=4' y
'num_pwmgens=4' y recuperar 1 puerto (ahorrando una 7i33).
Y si solo se necesita 12 steppers, podría decir 'num_stepgens=12' y
liberar un puerto (ahorrando una 7i47).
De esta manera, podemos guardar dos puertos (48 bits) para GPIO.

Lo sigiente son tablas de los firmwares disponibles en los paquetes oficiales.
Puede haber firmwares adicionales disponibles en el sitio web de Mesanet.com
que aún no han llegado a los paquetes de firmware oficiales de LinuxCNC, así que
compruebelos allí también.

Configuraciones predeterminadas de 3x20 (6 puertos varios) (El 3x20 viene en versiones de puerta de 1M, 1.5M y 2M.
Hasta ahora, todo el firmware está disponible en todos los tamaños de compuerta).
[width="90%", options="header"]
|====================================================================
|Firmware         | Encoder | PWMGen | StepGen | GPIO
|SV24             | 24      | 24     | 0       | 0
|SVST16_24        | 16      | 16     | 24      | 0
|====================================================================

Configuraciones predeterminadas de 5i22 (PCI de 4 puertos) (El 5i22 viene en versiones de puerta de 1M y 1.5M.
Hasta ahora, todo el firmware está disponible en todos los tamaños de compuerta).
[width="90%", options="header"]
|====================================================================
|Firmware         | Encoder | PWM | StepGen | GPIO
|SV16             | 16      | 16  | 0       | 0
|SVST2_4_7I47     | 4       | 2   | 4       | 72
|SVST8_8          | 8       | 8   | 8       | 0
|SVST8_24         | 8       | 8   | 24      | 0
|====================================================================

Configuraciones predeterminadas de 5i23 (PCI de 3 puertos) (El 5i23 tiene 400k puertas).
[width="90%", options="header"]
|====================================================================
|Firmware         | Encoder  | PWM        | StepGen  | GPIO
|SV12             | 12       | 12         | 0        | 0
|SVST2_8          | 2        | 2          | 8 (tbl5) | 12
|SVST2_4_7I47     | 4        | 2          | 4        | 48
|SV12_2X7I48_72   | 12       | 12         | 0        | 24
|SV12IM_2X7I48_72 | 12 (+IM) | 12         | 0        | 12
|SVST4_8          | 4        | 4          | 8 (tbl5) | 0
|SVST8_4          | 8        | 8          | 4 (tbl5) | 0
|SVST8_4IM2       | 8 (+IM)  | 8          | 4        | 8
|SVST8_8IM2       | 8 (+IM)  | 8          | 8        | 0
|SVTP6_7I39       | 6        | 0 (6 BLDC) | 0        | 0
|====================================================================

Configuraciones predeterminadas de 5i20 (PCI de 3 puertos) (El 5i20 tiene 200k puertas).
[width="90%", options="header"]
|====================================================================
|Firmware         | Encoder  | PWM        | StepGen  | GPIO
|SV12             | 12       | 12         | 0        | 0
|SVST2_8          | 2        | 2          | 8 (tbl5) | 12
|SVST2_4_7I47     | 4        | 2          | 4        | 48
|SV12_2X7I48_72   | 12       | 12         | 0        | 24
|SV12IM_2X7I48_72 | 12 (+IM) | 12         | 0        | 12
|SVST8_4          | 8        | 8          | 4 (tbl5) | 0
|SVST8_4IM2       | 8 (+IM)  | 8          | 4        | 8
|====================================================================

4i68 (PC de 3 puertos / 104) Configuraciones predeterminadas (El 4i68 tiene 400k puertas).
[width="90%", options="header"]
|====================================================================
|Firmware         | Encoder  | PWM        | StepGen  | GPIO
|SV12             | 12       | 12         | 0        | 0
|SVST2_4_7I47     | 4        | 2          | 4        | 48
|SVST4_8          | 4        | 4          | 8        | 0
|SVST8_4          | 8        | 8          | 4        | 0
|SVST8_4IM2       | 8 (+IM)  | 8          | 4        | 8
|SVST8_8IM2       | 8 (+IM)  | 8          | 8        | 0
|====================================================================


4i65 (PC de 3 puertos / 104) Configuraciones predeterminadas (El 4i65 tiene 200k puertas).
[width="90%", options="header"]
|====================================================================
|Firmware         | Encoder  | PWM        | StepGen  | GPIO
|SV12             | 12       | 12         | 0        | 0
|SVST8_4          | 8        | 8          | 4        | 0
|SVST8_4IM2       | 8 (+IM)  | 8          | 4        | 8
|====================================================================
7i43 (2 puertos paralelos) 400k versiones de puerta, configuraciones predeterminadas
[width="90%", options="header"]
|====================================================================
|Firmware         | Encoder  | PWM        | StepGen  | GPIO
|SV8              | 8        | 8          | 0        | 0
|SVST4_4          | 4        | 4          | 4 (tbl5) | 0
|SVST4_6          | 4        | 4          | 6 (tbl3) | 0
|SVST4_12         | 4        | 4          | 12       | 0
|SVST2_4_7I47     | 4        | 2          | 4        | 24
|====================================================================

7i43 (2 puertos paralelos) 200k versiones de puerta, configuraciones predeterminadas
[width="90%", options="header"]
|====================================================================
|Firmware         | Encoder  | PWM        | StepGen  | GPIO
|SV8              | 8        | 8          | 0        | 0
|SVST4_4          | 4        | 4          | 4 (tbl5) | 0
|SVST4_6          | 4        | 4          | 6 (tbl3) | 0
|SVST2_4_7I47     | 4        | 2          | 4        | 24
|====================================================================

Aunque varias tarjetas pueden tener el mismo nombre de archivo .BIT, no puede usar
un archivo .BIT que no es para esa tarjeta. Diferentes tarjetas tienen diferentes
frecuencias de reloj, así que asegúrese de cargar el archivo .BIT adecuado para su
tarjeta. Se pueden crear firmwares hm2 personalizados para aplicaciones especiales y
puede ver algunos firmwares hm2 personalizados en los directorios con
los predeterminados

Cuando carga el controlador de placa (hm2_pci o hm2_7i43), puede decirle
que deshabilite instancias de los tres módulos principales (pwmgen, stepgen y
codificador) estableciendo el recuento más bajo. Cualquier pin de E/S perteneciente a 
las instancias de módulos desactivados se convierten en GPIO.

== GPIO

Los pines de E/S de uso general en la placa que no son utilizados por 
las instancias de un módulo, se exportan a HAL como pines GPIO 'completos'. 
Los pines GPIO completos pueden ser configurados en tiempo de ejecución como entradas, 
salidas o open-drain, y tener una interfaz HAL que expone esta flexibilidad. Los pines de E/S 
que son propiedad de una instancia de módulo activo están restringidos por los requisitos del
módulo y tiene una interfaz HAL restringida.

Los GPIO tienen nombres como 'hm2_<BoardType>.<BoardNum>.gpio.<IONum>'.
IONum es un número de tres dígitos. El mapeo de IONum al conector y
pin-en-ese-connector se escribe en el syslog cuando se carga el controlador,
y está documentado en el manual Mesa para las placas Anything I/O.

La representación hm2 GPIO se modela después de las entradas y salidas digitales
descritas en la interfaz de dispositivo canónico (parte del documento de referencia general de HAL).

Pines GPIO predeterminados para la entrada.

=== Pines

* 'in' -
     (Bit, Out) Estado normal del pin hardware de entrada. TAnto los pines GPIO completos
    como los pines de E/S utilizados como entradas por las instancias de módulos activos tienen este pin.

* 'in_not' -
     (Bit, Out) Estado invertido del pin hardware entrada. Ambos GPIO completos
    los pines y los pines de E/S utilizados como entradas por las instancias de módulos activos tienen esto
    alfiler.

* 'out' -
     (Bit, In) Valor a escribir (posiblemente invertido) en el hardware
    pin de salida Solo los pines GPIO completos tienen este pin.

=== Parámetros

* 'invert_output' -
     (Bit, RW) Este parámetro solo tiene efecto si el parámetro 'is_output'
    es verdadero. Si este parámetro es verdadero, el valor de salida del
    GPIO será el inverso del valor en el pin HAL 'out'. Solo Los pines GPIO completos
    y los pines de E/S utilizados como salidas por instancias de módulos activos tienen
    este parámetro. Para invertir un pin del módulo activo, debe invertir el
    pin GPIO, no el pin del módulo.

* 'is_opendrain' -
     (Bit, RW) Este parámetro solo tiene efecto si el parámetro 'is_output'
    es verdadero. Si este parámetro es falso, el GPIO se comporta como un
    pin de salida normal: el pin de E/S en el conector se lleva al valor
    especificado por el pin HAL 'out' (posiblemente invertido) y el valor de
    los pines HAL 'in' e 'in_not' no están definidos. Si este parámetro es verdadero,
    el GPIO se comporta como un pi open-drain. Escribir 0 en el pin HAL 'out'
    baja el pin de E/S; escribir 1 en el pin HAL 'out' coloca el pin de E/S
    en un estado de alta impedancia. En este estado de alta impedancia, el pin de E/S
    flota (débilmente elevado), y otros dispositivos pueden manejar el valor; el
    valor resultante en el pin de E/S está disponible en los pines 'in' e 'in_not'.
    Solo los pines GPIO completos y pines de E/S utilizados como salidas por instancias activas
    de módulo tienen este parámetro.

* 'is_output' -
     (Bit, RW) Si se establece en 0, el GPIO es una entrada. El pin de E/S se coloca en un
    estado de alta impedancia (débilmente elevado), para ser conducido por otros
    dispositivos. El valor lógico en el pin de E/S está disponible en los pines HAL 'in' y
    'in_not'. Las escrituras en el pin HAL 'out' no tienen efecto. Si este
    parámetro se establece en 1, el GPIO es una salida; su comportamiento entonces depende
    en el parámetro 'is_opendrain'. Solo los pines GPIO completos tienen esto
    parámetro.

== StepGen

Los Stepgens tienen nombres como
'hm2_<BoardType>.<BoardNum>.stepgen.<Instance>.'. 'Instance' es un
número de dos dígitos que corresponde al número de instancia de Stepgen HostMot2.
Hay 'num_stepgens' instancias, que comienzan con 00.

Cada stepgen asigna 2-6 pines de E/S (seleccionados en tiempo de compilación del firmware), 
pero actualmente solo utiliza dos: salidas de paso y dirección. footnote:[En la actualidad, 
el firmware admite salidas paso a paso de múltiples fases, pero
el driver no. Se solicitan voluntarios interesados.]

La representación stepgen está modelada en el componente software stepgen.
El valor predeterminado de salida de paso de Stepgen es activa alto (alto durante el tiempo
de paso y bajo durante el espacio entre paso). Para invertir un pin de salida StepGen, invierta
el pin GPIO correspondiente que utiliza StepGen. Para encontrar el
pin GPIO que se usa para la salida StepGen ejecute dmesg como se muestra arriba.

Cada instancia de stepgen tiene los siguientes pines y parámetros:

=== Pines

* 'control-type' - 
     (Bit, In) Cambia entre el modo de control de posición (0) y 
    modo de control de velocidad (1). Por defecto, control de posición (0).

* 'counts' - 
    (s32, Out) Posición de retroalimentación en conteos (número de pasos).

* 'enable' - 
    (Bit, In) Habilita los pasos de salida. Cuando es falso, no se generan pasos.

* 'position-cmd' -
     (Float, in) Posición objetivo del movimiento paso a paso, en unidades de posición
    definidas por el usuario.

* 'position-fb' -
     (Float, out) Posición de retroalimentación en unidades de posición definidas por el usuario (counts/position_scale).

* 'velocity-cmd' - 
     (Float, In) Velocidad objetivo del movimiento paso a paso, definido por el usuario en
    unidades de posición por segundo. Este pin solo se usa cuando el stepgen está en
    modo de control de velocidad (control-type = 1).

* 'velocity-fb' - 
     (Float, Out) Velocidad de retroalimentación en unidades de posición definidas por el usuario por
    segundo.

=== Parámetros

* 'dirhold' -
     (u32, RW) Duración mínima de la señal de dirección estable después de 
    terminar un paso, en nanosegundos.

* 'dirsetup' -
     (u32, RW) Duración mínima de la señal de dirección estable antes de un paso
    comienza, en nanosegundos.

* 'maxaccel' -
     (Float, RW) Aceleración máxima, en unidades de posición por segundo por
    segundo. Si se establece en 0, el controlador no limitará su aceleración.

* 'maxvel' -
     (Flotador, RW) Velocidad máxima, en unidades de posición por segundo. Si se establece en 0,
    el conductor elegirá la velocidad máxima en función de los valores de
    steplen y stepspace (en el momento en que maxvel se estableció en 0).

* 'position-scale' - 
     (Float, RW) Convierte de recuentos a unidades de posición. posición = cuenta
    / position_scale

* 'step_type' -
     (u32, RW) Formato de salida, como el modparam step_type para el componente 
    softwareá stegen(9). 0 = Paso / Dir, 1 = Arriba / Abajo, 2 = Cuadratura. En
    Modo de cuadratura (step_type = 2), el stepgen genera un Gray completo
    ciclo (00 \ -> 01 \ -> 11 \ -> 10 \ -> 00) para cada 'paso' que tome.

* 'steplen' -
    (u32, RW) Duración de la señal de paso, en nanosegundos.

* 'stepspace' - 
    (u32, RW) Intervalo mínimo entre señales de paso, en nanosegundos.

=== Parámetros de salida

Los pines de paso y dirección de cada StepGen tienen dos parmetros adicionales.
Para encontrar qué pin de E/S pertenece a qué salida paso y dirección, 
ejecute dmesg como se describió anteriormente.

* 'invert_output' -
     (Bit, RW) Este parámetro solo tiene efecto si el parámetro 'is_output'
    es verdadero. Si este parámetro es verdadero, el valor de salida del
    GPIO será el inverso del valor en el pin HAL 'out'.

* 'is_opendrain' -
     (Bit, RW) Si este parámetro es falso, el GPIO se comporta como
    pin de salida normal: el pin de E/S en el conector se conduce al valor
    especificado por el pin HAL 'out' (posiblemente invertido). Si este parámetro
    es True, el GPIO se comporta como un pin opendrain. Escribir 0 en  
    el pin HAL 'out' conduce el pin de E/S bajo, escribiendo 1 en el pin HAL 'out' pone el
    pin de E/S en un estado de alta impedancia. En este estado de alta impedancia, el pin E/S
    flota (tirados débilmente alto) y otros dispositivos pueden impulsar el valor;
    el valor resultante en el pin de E/S está disponible en los pines 'in' e 'in_not'.
    Solo pines GPIO completos y pines de E/S utilizados como salidas por instancias de módulo activas
    tienen este parámetro.

== PWMGen

Los PWMgens tienen nombres como
'hm2_<BoardType>.<BoardNum> .pwmgen.<Instance>.'. 'Instance' es un
número de dos dígitos que corresponde al número de instancia de HostMot2 pwmgen.
Hay 'num_pwmgens' instancias, que comienzan con 00.

En HM2, cada pwmgen usa tres pines de E/S de salida: No habilitado, Out0 y
Fuera 1. Para invertir un pin de salida PWMGen, invierte el GPIO correspondiente
pin que está siendo usado por PWMGen. Para encontrar el pin GPIO que se utiliza para
la salida PWMGen ejecuta dmesg como se muestra arriba.

La función de los pines de E/S Out0 y Out1 varía con el tipo de salida
parámetro (ver más abajo).

La representación hm2 pwmgen es similar al software pwmgen
componente. Cada instancia de pwmgen tiene los siguientes pines y parámetros:

=== Pines

* 'habilitar' -
     (Bit, In) Si es verdadero, el pwmgen establecerá su pin No habilitado falso y
    emitir sus pulsos. Si 'enable' es falso, pwmgen establecerá su No-Enable
    pin verdadero y no emite ninguna señal.

* 'valor' -
    (Float, In) El valor actual del comando pwmgen, en unidades arbitrarias.

=== Parámetros

* 'Tipo de salida' -
     (s32, RW) Esto emula el argumento output_type load-time al
    componente de software pwmgen. Este parámetro se puede cambiar en tiempo de ejecución,
    pero la mayoría de las veces probablemente quieras configurarlo al inicio y luego
    déjalo. Los valores aceptados son 1 (PWM en Out0 y Dirección en
    Out1), 2 (Up on Out0 y Down on Out1), 3 (modo PDM, PDM on Out0 y
    Dir en Out1), y 4 (Dirección en Out0 y PWM en Out1, 'para bloqueado
    antifase ').

* 'escala' -
     (Float, RW) Factor de escala para convertir el 'valor' de unidades arbitrarias a
    ciclo de trabajo: dc = valor / escala. El ciclo de trabajo tiene un rango efectivo de
    -1.0 a +1.0 inclusive, todo lo que esté fuera de ese rango se recorta.

* 'pdm_frequency' -
     (u32, RW) Esto especifica la frecuencia PDM, en Hz, de todos los pwmgen
    instancias que se ejecutan en modo PDM (modo 3). Esta es la 'ranura de pulso
    frecuencia'; la frecuencia con la que el generador pdm en la placa Anything I / O
    elige si emitir un pulso o un espacio. Cada pulso (y espacio) en
    el tren de pulsos PDM tiene una duración de 1 / pdm_frequency segundos. por
    ejemplo, estableciendo pdm_frequency en 2e6 (2 MHz) y el ciclo de trabajo en
    El 50% da como resultado una onda cuadrada de 1 MHz, idéntica a una señal PWM de 1 MHz
    con 50% de ciclo de trabajo. El rango efectivo de este parámetro es de
    aproximadamente 1525 Hz hasta poco menos de 100 MHz. Tenga en cuenta que la frecuencia máxima es
    determinado por la frecuencia ClockHigh de la placa Anything I / O; el
    5i20 y 7i43 tienen un reloj de 100 MHz, lo que resulta en un PDM máximo de 100 Mhz
    frecuencia. Otros tableros pueden tener diferentes relojes, lo que resulta en
    diferentes frecuencias máximas de PDM. Si el usuario intenta establecer el
    frecuencia demasiado alta, se recortará a la frecuencia máxima admitida
    del tablero.

* 'pwm_frequency' -
     (u32, RW) Esto especifica la frecuencia PWM, en Hz, de todos los pwmgen
    instancias que se ejecutan en los modos PWM (modos 1 y 2). Este es el
    frecuencia de la onda del ciclo de trabajo variable. Su rango efectivo es de
    1 Hz hasta 193 KHz. Tenga en cuenta que la frecuencia máxima está determinada por
    Reloj Alta frecuencia de la placa Anything I / O; los 5i20 y 7i43 ambos
    tener un reloj de 100 MHz, lo que resulta en una frecuencia PWM máxima de 193 KHz. Otro
    los tableros pueden tener diferentes relojes, lo que resulta en diferentes PWM máx.
    frecuencias Si el usuario intenta establecer la frecuencia demasiado alta,
    se recortará a la frecuencia máxima admitida de la placa.
    Las frecuencias inferiores a aproximadamente 5 Hz no son terriblemente precisas, pero superiores a 5 Hz
    Están bastante cerca.

=== Parámetros de salida

Los pines de salida de cada PWMGen tienen dos parámetros adicionales. Encontrar
qué pin de E/S pertenece a qué salida ejecuta dmesg como se describió anteriormente.

* 'invert_output' -
     (Bit, RW) Este parámetro solo tiene efecto si el 'is_output'
    El parámetro es verdadero. Si este parámetro es verdadero, el valor de salida del
    GPIO será el inverso del valor en el pin HAL 'fuera'.

* 'is_opendrain' -
     (Bit, RW) Si este parámetro es falso, el GPIO se comporta normalmente
    pin de salida: el pin de E/S en el conector se conduce al valor
    especificado por el pin HAL 'fuera' (posiblemente invertido). Si este parámetro
    Es cierto, el GPIO se comporta como un pasador de drenaje abierto. Escribir 0 en el 'out'
    El pin HAL impulsa el pin de E/S bajo, escribiendo 1 en el pin HAL 'out' pone el
    Pin de E/S en un estado de alta impedancia. En este estado de alta impedancia, la E/S
    los flotadores de clavija (tirados débilmente alto) y otros dispositivos pueden impulsar el valor;
    el valor resultante en el pin de E/S está disponible en 'in' e 'in_not'
    patas. Solo pines GPIO completos y pines de E/S utilizados como salidas por módulo activo
    Las instancias tienen este parámetro.

[[sec: codificador hm2]]
== Codificador

Los codificadores tienen nombres como
'hm2_ <BoardType>. <BoardNum> .encoder. <Instance>.'. 'Instancia' es un
número de dos dígitos que corresponde a la instancia del codificador HostMot2
número. Hay instancias 'num_encoders', que comienzan con 00.

Cada codificador usa tres o cuatro pines de E/S de entrada, dependiendo de cómo
El firmware fue compilado. Los codificadores de tres pines usan A, B e Índice
(a veces también conocido como Z). Los codificadores de cuatro pines usan A, B, Index y
Máscara de índice.

La representación del codificador hm2 es similar a la descrita por
Interfaz de dispositivo canónico (en el documento de referencia general de HAL), y
al componente codificador de software. Cada instancia de codificador tiene el
siguientes pines y parámetros:

=== Pines

* 'contar' -
    (s32, Out) Número de recuentos de codificador desde el reinicio anterior.

* 'index-enable' -
     (Bit, I / O) Cuando este pin se establece en True, el recuento (y, por lo tanto, también
    posición) se restablecen a cero en el siguiente pulso de índice (Fase-Z). En el
    Al mismo tiempo, la habilitación de índice se restablece a cero para indicar que el pulso tiene
    ocurrió.

* 'posición' -
    (Flotante, Fuera) Posición del codificador en unidades de posición (conteo / escala).

* 'primas' -
     (s32, Out) Número total de recuentos de codificador desde el inicio, no
    ajustado por índice o reinicio.

* 'Reiniciar' -
     (Bit, In) Cuando este pin es VERDADERO, se establecen los pines de conteo y posición
    a 0. (El valor del pin de velocidad no se ve afectado por esto).
    el controlador no restablece este pin a FALSE después de restablecer el recuento a 0,
    Ese es el trabajo del usuario.

* 'velocidad' -
    (Float, Out) Velocidad estimada del codificador en unidades de posición por segundo.

=== Parámetros

* 'modo contador' -
     (Bit, RW) Establecer en False (el valor predeterminado) para Quadrature. Establecer en verdadero para
    Arriba / Abajo o para una sola entrada en la Fase A. Se puede usar para una frecuencia para
    convertidor de velocidad con una sola entrada en la Fase A cuando se establece en verdadero.

* 'filtro' -
     (Bit, RW) Si se establece en True (el valor predeterminado), el contador de cuadratura necesita
    15 relojes para registrar un cambio en cualquiera de las tres líneas de entrada (cualquiera
    pulso más corto que esto se rechaza como ruido). Si se establece en False, el
    El contador de cuadratura necesita solo 3 relojes para registrar un cambio. los
    el reloj de muestra del codificador funciona a 33 MHz en las tarjetas PCI Anything I / O y 50 MHz
    en el 7i43.

* 'index-invert' -
     (Bit, RW) Si se establece en True, el borde ascendente del pin de entrada de índice
    activa el evento Index (si index-enable es True). Si se establece en False,
    el borde descendente se dispara.

* 'index-mask' -
     (Bit, RW) Si se establece en True, el pin de entrada de índice solo tiene efecto si
    el pin de entrada de la máscara de índice es verdadero (o falso, dependiendo de
    pin index-mask-invert a continuación).

* 'index-mask-invert' -
     (Bit, RW) Si se establece en True, Index-Mask debe ser False para que Index tenga
    Un efecto. Si se establece en False, el pin de máscara de índice debe ser True.

* 'escala' -
     (Float, RW) Convierte de unidades de 'conteo' a unidades de 'posición'. UN
    El codificador de cuadratura normalmente tendrá 4 recuentos por pulso, por lo que 100 PPR
    codificador sería 400 cuentas por revolución. En '.counter-mode' a 100
    El codificador PPR tendría 100 recuentos por revelación, ya que solo usa
    borde ascendente de A y dirección es B.

* 'vel-timeout' -
     (Float, RW) Cuando el codificador se mueve más lento que un pulso por cada
    hora en que el controlador lee el recuento de la FPGA (en hm2_read ()
    función), la velocidad es más difícil de estimar. El conductor puede esperar
    varias iteraciones para que llegue el siguiente pulso, todo el tiempo
    informar el límite superior de la velocidad del codificador, que puede ser
    adivinado con precisión. Este parámetro especifica cuánto tiempo esperar para
    siguiente pulso, antes de informar que el codificador se detuvo. Este parámetro está en
    segundos.

== Configuración 5i25

=== Firmware

El firmware 5i25 viene precargado para la tarjeta secundaria con la que se compra.
Entonces el 'firmware = xxx.BIT' no es parte de la cadena de configuración hm2_pci cuando
usando un 5i25.

=== Configuración

Las configuraciones de ejemplo de las tarjetas 5i25 / 7i76 y 5i25 / 7i77 se incluyen en
el << sub: selector de configuración, Selector de configuración >>.

Si le gusta rodar su propia configuración, los siguientes ejemplos muestran cómo
para cargar los controladores en el archivo HAL.

Tarjeta .5i25 + 7i76
----
# cargar el controlador genérico
loadrt hostmot2

# cargar el controlador PCI y configurar
loadrt hm2_pci config = "num_encoders = 1 num_stepgens = 5 sserial_port_0 = 0XXX"
----

Tarjeta .5i25 + 7i77
----
# cargar el controlador genérico
loadrt hostmot2

# cargar el controlador PCI y configurar
loadrt hm2_pci config = "num_encoders = 6 num_pwmgens = 6 sserial_port_0 = 0XXX"
----

=== Configuración SSERIAL

La cadena de configuración 'sserial_port_0 = 0XXX' establece algunas opciones para la tarjeta secundaria inteligente en serie. Estas opciones son específicas para cada tarjeta secundaria. Consulte el manual de Mesa para obtener más información sobre el uso exacto.

=== 7i77 Límites

El límite mínimo y el límite máximo son límites en el valor del pin (en este caso, el valor de salida analógica) fullscalemax es el factor de escala.

Estos están configurados por defecto en el rango analógico o analógico (muy probablemente en voltios).

Entonces, por ejemplo, en las salidas analógicas 7I77 + -10V, los valores predeterminados son:

minlimit -10
maxlimit +10
maxfullscale 10

Si desea decir escalar el análogo de un canal a IPS para un servo de modo de velocidad (digamos 24 IPS máx.), Puede establecer los límites de esta manera:

minlimit -24
maxlimit +24
maxfullscale 24

Si desea escalar el análogo de un canal a RPM para un eje de 0 a 6000 RPM con control de 0-10 V, puede establecer los límites de esta manera:

mínimo 0
maxlimit 6000
maxfullscale 6000
(esto evitaría que se establezcan voltajes de salida negativos no deseados)

== Configuraciones de ejemplo

Se incluyen varias configuraciones de ejemplo para el hardware de Mesa con LinuxCNC.
Las configuraciones se encuentran en las secciones hm2-servo y hm2-stepper de << sub: configuration-selector, Configuration Selector >>. Por lo general, necesitará la placa instalada para la configuración que elija cargar. Los ejemplos son un buen lugar para comenzar y le ahorrarán tiempo.
Simplemente elija el ejemplo adecuado del Selector de configuración de LinuxCNC y guarde una copia en su computadora para poder editarlo. Para ver los pines y parámetros exactos que le proporcionó su configuración, abra la ventana Mostrar configuración de HAL en el menú Máquina o haga dmesg como se describe anteriormente.
