[[cha: stepper-config]]

= Configuración paso a paso

== Introducción

La forma preferida de configurar una máquina de pasos estándar es con
Asistente de configuración de pasos. Ver el
<< cha: stepconf-wizard, Stepper Configuration Wizard >> Capítulo.

Este capítulo describe algunas de las configuraciones más comunes para
configurar un sistema basado en pasos. Estos sistemas utilizan motores paso a paso.
con unidades que aceptan señales de paso y dirección.

Es una de las configuraciones más simples, porque los motores funcionan en bucle abierto (no
la retroalimentación proviene de los motores), pero el sistema debe ser
configurado correctamente para que los motores no se detengan o pierdan pasos.

La mayor parte de este capítulo se basa en una configuración de muestra publicada junto con
LinuxCNC. La configuración se llama stepper_inch, y se puede encontrar ejecutando el
<< cha: running-emc, Selector de configuración >>.

== Velocidad de paso máxima

Con la generación de pasos de software, la tasa de paso máxima es un paso por
dos BASE_PERIODs para salida de paso y dirección. El máximo solicitado
la velocidad de paso es el producto del eje 'MAX_VELOCITY y su INPUT_SCALE.
Si la tasa de pasos solicitada no es alcanzable, los siguientes errores lo harán
ocurren, particularmente durante movimientos rápidos y movimientos G0.

Si su controlador paso a paso puede aceptar la entrada en cuadratura, use este modo.
Con una señal de cuadratura, es posible un paso para cada BASE_PERIOD,
duplicando la velocidad de paso máxima.

Los otros remedios son disminuir uno o más de: el BASE_PERIOD
(establecer esto demasiado bajo hará que la máquina deje de responder o
incluso bloquear), el INPUT_SCALE (si puede seleccionar diferentes tamaños de paso
en su controlador paso a paso, cambie las relaciones de las poleas o el paso del tornillo de avance), o
MAX_VELOCITY y STEPGEN_MAXVEL.

Si no hay una combinación válida de BASE_PERIOD, INPUT_SCALE y MAX_VELOCITY
es aceptable, entonces considere usar la generación de pasos de hardware (como
con el controlador paso a paso universal compatible con LinuxCNC, las tarjetas Mesa y
otros.)

== Pinout

Una de las principales fallas en LinuxCNC fue que no podía especificar el pinout
sin recompilar el código fuente. LinuxCNC es mucho más flexible, y ahora
(gracias a la Capa de abstracción de hardware) puede especificar fácilmente qué
la señal va a donde. Vea el << cha: basic-hal-reference, Tutorial básico de HAL >>
para más información sobre HAL.

Como se describe en la Introducción y tutorial de HAL, tenemos
señales, pines y parámetros dentro del HAL.

NOTA: Estamos presentando un eje para mantenerlo corto, todos los demás son similares.

Los relevantes para nuestro pinout son:

----
señales: Xstep, Xdir y Xen
pines: parport.0.pin-XX-out y parport.0.pin-XX-in
----

Dependiendo de lo que haya elegido en su archivo .ini que esté utilizando
ya sea standard_pinout.hal o xylotex_pinout.hal. Estos son dos archivos
que le indican al HAL cómo vincular las diferentes señales y pines. Más lejos
en investigaremos el standard_pinout.hal.

=== Pinout estándar HAL

Este archivo contiene varios comandos HAL, y generalmente se ve así:

----
# archivo de configuración de pinout estándar para steppers de 3 ejes
# usando un parport para E / S
# #
# primero cargue el controlador parport
loadrt hal_parport cfg = "0x0378"
# #
# a continuación, conecte las funciones de parport a hilos
# leer entradas primero
addf parport.0.read hilo base 1
# escribir salidas últimas
addf parport.0.write base-thread -1
# #
# finalmente conecta los pines físicos a las señales
net Xstep => parport.0.pin-03-out
net Xdir => parport.0.pin-02-out
net Ystep => parport.0.pin-05-out
net Ydir => parport.0.pin-04-out
net Zstep => parport.0.pin-07-out
net Zdir => parport.0.pin-06-out

# crea una señal para el loopback de estop
net estop-loop iocontrol.0.user-enable-out iocontrol.0.emc-enable-in

# crea señales para el loopback de carga de herramientas
net tool-prep-loop iocontrol.0.tool-prepare iocontrol.0.tool-prepare
net tool-change-loop iocontrol.0.tool-change iocontrol.0.tool-changed

# conecta el pin del controlador de movimiento "spindle on" a un pin físico
net spindle-on spindle.0.on => parport.0.pin-09-out

###
### Puede usar algo como esto para habilitar las unidades chopper cuando la máquina está ENCENDIDA
### la señal Xen se define en core_stepper.hal
###

# net Xen => parport.0.pin-01-out

###
### Si desea activo bajo para este pin, inviértalo así:
###

# setp parport.0.pin-01-out-invert 1

###
### Un interruptor de inicio de muestra en el eje X (eje 0). hacer una señal
### vincular el pin parport entrante a la señal, luego vincular la señal
### al pin de entrada del conmutador de inicio del eje 0 de LinuxCNC
###

# net Xhome parport.0.pin-10-in => joint.0.home-sw-in

###
### ¿Interruptores de inicio compartidos todos en un pin de puerto paralelo?
### está bien, conecte la misma señal a todos los ejes, pero asegúrese de
### establece HOME_IS_SHARED y HOME_SEQUENCE en el archivo ini.
###

# net homeswitches <= parport.0.pin-10-in
# net homeswitches => joint.0.home-sw-in
# net homeswitches => joint.1.home-sw-in
# net homeswitches => joint.2.home-sw-in

###
### Muestra de interruptores de límite separados en el eje X (eje 0)
###

# net X-neg-limit parport.0.pin-11-in => joint.0.neg-lim-sw-in
# net X-pos-limit parport.0.pin-12-in => joint.0.pos-lim-sw-in

###
### Al igual que en el ejemplo de los interruptores de inicio compartidos, puede conectar juntos
### finales de carrera. Tenga cuidado si golpea uno, LinuxCNC se detendrá pero no puede decir
### usted qué interruptor / eje ha fallado. Tenga cuidado al recuperarse de esto.
###

# net Xlimits parport.0.pin-13-in => joint.0.neg-lim-sw-in joint.0.pos-lim-sw-in

----

Las líneas que comienzan con '#' son comentarios, y su único propósito es
guiar al lector a través del archivo.

=== Descripción general

Hay un par de operaciones que se ejecutan cuando el
standard_pinout.hal se ejecuta / interpreta:

* El controlador Parport se carga (ver << cha: parport, Capítulo Parport >>
   para detalles)
* Las funciones de lectura y escritura del controlador de parport se asignan a
   nota al pie del subproceso base: [el subproceso más rápido en la configuración de LinuxCNC, generalmente el
   el código se ejecuta cada pocas decenas de microsegundos]
* Las señales de paso y dirección para los ejes X, Y, Z se vinculan a los pines en el
   parport
* Se conectan más señales de E / S (loopback de estop, loopback del cambiador de herramientas)
* Una señal de husillo se define y se vincula a un pin parport

=== Cambiar el standard_pinout.hal

Si desea cambiar el archivo standard_pinout.hal, todo lo que necesita es un
editor de texto. Abra el archivo y localice las partes que desea cambiar.

Si desea, por ejemplo, cambiar el pin para el eje X Step &
Señales de dirección, todo lo que necesita hacer es cambiar el número en el
Nombre 'parport.0.pin-XX-out':

----
net Xstep parport.0.pin-03-out
net Xdir parport.0.pin-02-out
----

se puede cambiar a:

----
net Xstep parport.0.pin-02-out
net Xdir parport.0.pin-03-out
----

o básicamente cualquier otro pin 'out' que te guste.

Sugerencia: asegúrese de no tener más de una señal conectada al
mismo pin

=== Cambio de polaridad de una señal

Si el hardware externo espera una señal de "bajo activo", configure el
parámetro '-invertir' correspondiente. Por ejemplo, para invertir el huso
Señal de control:

----
setp parport.0.pin-09-invert VERDADERO
----

=== Agregar control de velocidad de husillo PWM

Si su huso puede ser controlado por una señal PWM, use el 'pwmgen'
componente para crear la señal:

----
loadrt pwmgen output_type = 0
addf pwmgen.update servo-thread
addf pwmgen.make-pulses base-thread
net spindle-speed-cmd spindle.0.speed-out => pwmgen.0.value
spindle-on spindle.0.on => pwmgen.0.enable neto
net spindle-pwm pwmgen.0.pwm => parport.0.pin-09-out
setp pwmgen.0.scale 1800 # Cambia a la velocidad máxima de tu husillo en RPM
----

Esto supone que la respuesta del controlador del husillo a PWM es simple:
0% PWM da 0 RPM, 10% PWM da 180 RPM, etc. Si hay un mínimo
Se requiere PWM para que el husillo gire, siga el ejemplo en
configuración de muestra 'nist-lathe' para usar un componente 'scale'.

=== Agregar una señal de habilitación

Algunos amplificadores (unidades) requieren una señal de habilitación antes de aceptar
y mando de movimiento de los motores. Por esta razón ya hay
señales definidas llamadas 'Xen', 'Yen', 'Zen'.

Para conectarlos use el siguiente ejemplo:

----
net Xen parport.0.pin-08-out
----

Puede tener un solo pin que habilite todas las unidades; o
varios, dependiendo de la configuración que tenga. Tenga en cuenta, sin embargo, que generalmente
cuando falla un eje, todas las demás unidades también se desactivarán, por lo que
tener una sola señal / pin de habilitación para todas las unidades es común
práctica.

=== Botón externo ESTOP

El archivo standard_pinout.hal supone que no hay un botón ESTOP externo. Para más
información sobre un E-Stop externo, consulte la página del manual estop_latch.

