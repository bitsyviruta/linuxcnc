= Construyendo LinuxCNC

== Introducción

Este documento describe cómo construir el software LinuxCNC y
documentación de la fuente. Esto es principalmente útil si eres un
desarrollador que está modificando LinuxCNC. También puede ser útil si eres
un usuario que está probando ramas de desarrollador, aunque también tiene
La opción de instalar simplemente paquetes Debian desde el robot de construcción:
http://buildbot.linuxcnc.org


[[Inicio rápido]]
=== Inicio rápido

Para los impacientes, intente esto:

----
> git clone git: //github.com/linuxcnc/linuxcnc.git linuxcnc-dev
> cd linuxcnc-dev / src
> ./autogen.sh
> ./configure --with-realtime = uspace
> hacer
----

¡Eso probablemente fallará! Eso no te hace una mala persona, solo
significa que debe leer todo este documento para averiguar cómo solucionar su problema.
problemas. Especialmente la sección sobre << Satisfacer-Construir-Dependencias,
Dependencias de construcción satisfactorias >>.

Si está ejecutando en un sistema con capacidad en tiempo real (como una instalación desde
la imagen de LinuxCNC Live / Install, vea la sección << _ realtime, Realtime >> a continuación),
se necesita un paso de compilación adicional en este momento:

-----
> sudo make setuid
-----

Después de haber creado con éxito LinuxCNC, es hora de ejecutar las pruebas:

-----
> fuente ../scripts/rip-environment
> runtests
-----

¡Esto también podría fallar! Lea todo este documento, pero especialmente la sección.
en << Configuración del entorno, Configuración del entorno de prueba >>.


== Plataformas compatibles

El proyecto LinuxCNC apunta a distribuciones modernas basadas en Debian, que incluyen
Debian, Ubuntu y Mint.

Probamos continuamente en las plataformas enumeradas en
http://buildbot.linuxcnc.org.

LinuxCNC se basa en la mayoría de las otras distribuciones de Linux, aunque depende
La gestión será más manual y menos automática. Parches para mejorar
La portabilidad a nuevas plataformas siempre es bienvenida.


=== tiempo real

LinuxCNC es un controlador de máquina herramienta, y requiere una plataforma en tiempo real
para hacer este trabajo Esta versión de LinuxCNC admite tres plataformas en tiempo real.

RTAI ::

    De https://www.rtai.org. Un kernel de Linux con el parche RTAI es
    disponible en el archivo de Debian en http://www.linuxcnc.org. Ver
    << cha: getting-linuxcnc, Getting LinuxCNC >> para obtener instrucciones de instalación.

Xenomai ::

    De https://xenomai.org. Tendrás que compilar u obtener un Xenomai
    kernel usted mismo

Preempt-RT ::

    De https://rt.wiki.kernel.org. Un kernel de Linux con el
    El parche Preempt-RT está disponible ocasionalmente en Debian
    archivo en https://www.debian.org, y desde la máquina wayback en
    https://snapshot.debian.org.

Para hacer uso de las capacidades en tiempo real de LinuxCNC, ciertas partes de
LinuxCNC necesita ejecutarse con privilegios de root. Para habilitar la raíz para estos
partes, ejecute este comando adicional después del `make` que construye LinuxCNC:

-----
> sudo make setuid
-----


=== No en tiempo real

LinuxCNC también se puede construir y ejecutar en plataformas que no son en tiempo real, como
una instalación regular de Debian o Ubuntu sin ningún núcleo especial en tiempo real.

En este modo, LinuxCNC no es útil para controlar máquinas herramientas, pero
es útil para simular la ejecución del código G y para probar el
partes del sistema que no son en tiempo real (como las interfaces de usuario y algunas
tipos de componentes y controladores de dispositivos).


== Modos de construcción

Hay dos formas de construir LinuxCNC: la "ejecución en
lugar "y el modo de empaquetado Debian fácil de usar.


=== Edificio para correr en el lugar

En una compilación Run-In-Place, los programas LinuxCNC se compilan desde la fuente
y luego se ejecuta directamente desde el directorio de compilación. Nada es
instalado fuera del directorio de compilación.

Esto es rápido y fácil, y adecuado para la iteración rápida de cambios.

El conjunto de pruebas LinuxCNC se ejecuta solo en una compilación Run-In-Place.

La mayoría de los desarrolladores de LinuxCNC compilan principalmente con este modo.

Building for Run-In-Place sigue los pasos en << Inicio rápido,
Inicio rápido >> sección en la parte superior de este documento, posiblemente con
diferentes argumentos para `src / configure` y` make`.


[[src-configure-argumentos]]
==== argumentos `src / configure`

El script `src / configure` configura cómo será el código fuente
compilado Toma muchos argumentos opcionales.

Enumere todos los argumentos para `src / configure` ejecutando esto:

-----
> cd linuxcnc-dev / src
> ./configure --help
-----

Los argumentos más utilizados son:

`--with-realtime = uspace` ::

    Construir para cualquier plataforma en tiempo real, o no en tiempo real.
    Los ejecutables LinuxCNC resultantes se ejecutarán tanto en un kernel de Linux
    con parches Preempt-RT (que proporcionan control de la máquina en tiempo real) y
    en un núcleo Linux de vainilla (sin parches) (que proporciona simulación de código G
    pero sin control de máquina en tiempo real). Si los archivos de desarrollo están instalados
    para Xenomai (típicamente del paquete libxenomai-dev) o RTAI (típicamente
    desde un paquete con un nombre que comienza por "rtai-modules"), soporte para
    estos núcleos en tiempo real también estarán habilitados.

`--with-realtime = / usr / realtime- $ VERSION` ::

    Compilación para la plataforma RTAI en tiempo real utilizando el "kernel realtime" más antiguo
    modelo.
    Esto requiere que
    tiene un núcleo RTAI y los módulos RTAI instalados en
    `/ usr / realtime- $ VERSION`. Los ejecutables LinuxCNC resultantes serán
    solo se ejecuta en el kernel RTAI especificado. A partir de LinuxCNC 2.7, esto
    produce el mejor rendimiento en tiempo real.

`--enable-build-documentation` ::

    Cree la documentación, además de los ejecutables. Esta opción
    aumenta significativamente el tiempo requerido para la compilación, ya que construir
    los documentos consumen bastante tiempo. Si no estás trabajando activamente
    en la documentación es posible que desee omitir este argumento.


[[hacer argumentos]]
==== `make` argumentos

El comando `make` toma dos argumentos opcionales útiles.


Compilación paralela ::

    `make` toma un argumento opcional` -jN` (donde N es un número).
    Esto permite la compilación paralela con N procesos simultáneos, que
    puede acelerar significativamente tu construcción.
+
Un valor útil para N es la cantidad de CPU en su sistema de compilación. Usted puede
descubra el número de CPU ejecutando `nproc`.


Construyendo solo un objetivo específico ::

    Si desea construir solo una parte específica de LinuxCNC, puede nombrar
    lo que quiere construir en la línea de comando `make`. Por ejemplo,
    si está trabajando en un componente llamado `froboz`, puede construir su
    ejecutable ejecutando:
+
-----
> cd linuxcnc-dev / src
> make ../bin/froboz
-----


=== Construyendo paquetes Debian

Al crear paquetes Debian, los programas LinuxCNC se compilan a partir de
fuente y luego almacenado en un paquete Debian, completo con dependencia
información. Esto lleva más tiempo y los programas no se pueden usar hasta
El paquete Debian se instala en una máquina de destino.

Este modo de compilación es principalmente útil cuando se empaqueta el software para
entrega a usuarios finales, y al construir el software para una máquina
que no tiene instalado el entorno de compilación, o que no tiene
acceso a Internet.

La creación de paquetes Debian requiere la herramienta `dpkg-buildpackage`, de
Paquete `dpkg-dev`:

-----
> sudo apt-get install dpkg-dev
-----

La creación de paquetes Debian también requiere que todas las dependencias de compilación sean
instalado, como se describe en la sección << Satisfacer-Construir-Dependencias,
Dependencias de construcción satisfactorias >>.

Una vez que se cumplen esos requisitos previos, la construcción de los paquetes Debian consiste
de dos pasos

El primer paso es generar los scripts y metadatos del paquete Debian
desde el repositorio de git ejecutando esto:

-----
> cd linuxcnc-dev / debian
> ./configure uspace
> cd ..
-----

[NOTA]
=====
El script `debian / configure` es diferente del script` src / configure`
¡guión!

El script `debian / configure` necesita diferentes argumentos dependiendo del
plataforma en la que está construyendo / para, vea los << debian-configure-argumentos,
argumentos `debian / configure` >> sección.
=====

Una vez que los scripts del paquete Debian y los metadatos estén configurados, cree el
paquete ejecutando `dpkg-buildpackage` (tenga en cuenta que debe ejecutarse desde
el directorio `linuxcnc-dev`, * no * de` linuxcnc-dev / debian`):

-----
> dpkg-buildpackage -b -uc
-----


[[debian-configure-argumentos]]
==== argumentos `debian / configure`

El script `debian / configure` configura el paquete Debian. Debería
se ejecute antes de que se puedan ejecutar `dpkg-checkbuilddeps` y` dpkg-buildpackage`.

Toma un solo argumento que especifica el tiempo real o no en tiempo real
plataforma para construir. Los valores normales para este argumento son:

`uspace` ::

    Configure el paquete Debian para Preempt-RT en tiempo real o para
    no en tiempo real (estos dos son compatibles).

`noauto` ::
`rtai` ::
`xenomai` ::

    Normalmente, se detectan las listas de RTOS para uspace en tiempo real para admitir
    automáticamente. Sin embargo, si lo desea, puede especificar uno o más de estos
    después de `uspace` para habilitar el soporte para estos RTOS. O, para deshabilitar
    autodetección, especifique `noauto`.

    Si solo desea el tradicional "módulo de kernel" RTAI en tiempo real, use
    `-r` o` $ KERNEL_VERSION` en su lugar.

`rtai = <nombre del paquete>` ::

    Si el paquete de desarrollo para rtai lxrt no comienza con
    "rtai-modules", o si el primer paquete de este tipo aparece en la búsqueda de apt-cache
    no es el deseado, luego especifique explícitamente el nombre del paquete.

`-r` ::

    Configure el paquete Debian para el kernel RTAI actualmente en ejecución.
    Debe estar ejecutando un kernel RTAI en su máquina de compilación para esto
    ¡trabajar!

`$ KERNEL_VERSION` ::

    Configure el paquete debian para la versión de kernel RTAI especificada
    (por ejemplo, "3.4.9-rtai-686-pae"). Los encabezados del kernel coincidentes
    el paquete debian debe estar instalado en su máquina de compilación (por ejemplo
    "linux-headers-3.4.9-rtai-686-pae"). Tenga en cuenta que puede _construir_
    LinuxCNC en esta configuración, pero si no está ejecutando el
    Coincidencia de kernel RTAI no podrá ejecutar LinuxCNC, incluyendo
    El conjunto de pruebas.


[[Dependencias de construcción satisfactorias]]
== Dependencias de compilación satisfactorias

En las plataformas basadas en Debian, proporcionamos metadatos de empaque que saben
qué paquetes de software externos deben instalarse para construir
LinuxCNC. Esto se llama las dependencias de compilación de LinuxCNC. Usted puede
use estos metadatos para enumerar fácilmente los paquetes requeridos que faltan
Su sistema de construcción.

Los sistemas Debian proporcionan un programa llamado `dpkg-checkbuilddeps` que
analiza los metadatos del paquete y compara los paquetes enumerados como compilación
dependencias contra la lista de paquetes instalados, y te dice
lo que falta

Primero, instale el programa `dpkg-checkbuilddeps` ejecutando:

-----
> sudo apt-get install dpkg-dev
-----

Luego, solicite a su caja git LinuxCNC para generar su paquete Debian
metadatos:

-----
> cd linuxcnc-dev / debian
> ./configure uspace
> cd ..
-----

Finalmente, solicite a `dpkg-checkbuilddeps` que haga su trabajo (tenga en cuenta que necesita
ejecutar desde el directorio `linuxcnc-dev`, * no * desde` linuxcnc-dev / debian`):

-----
> dpkg-checkbuilddeps
-----

Emitirá una lista de paquetes necesarios para construir LinuxCNC
en su sistema, pero que aún no están instalados. Instalarlos todos con
`sudo apt-get install`, seguido de los nombres de los paquetes.

Puede volver a ejecutar `dpkg-checkbuilddeps` en cualquier momento que desee, para enumerar cualquier
paquetes faltantes


[[Configuración del entorno]]
== Configuración del entorno

Esta sección describe los pasos especiales necesarios para configurar una máquina para
ejecute los programas LinuxCNC, incluidas las pruebas.


=== Aumentar el límite de memoria bloqueada

LinuxCNC intenta mejorar su latencia en tiempo real bloqueando la memoria que
utiliza en RAM. Hace esto para evitar que el sistema operativo
intercambiar LinuxCNC al disco, lo que tendría malos efectos sobre la latencia.

Normalmente, el bloqueo de memoria en la RAM está mal visto y el sistema operativo
establece un límite estricto sobre la cantidad de memoria que un usuario puede tener bloqueado.

Cuando se utiliza la plataforma de tiempo real Preempt-RT, LinuxCNC se ejecuta con suficiente
privilegio de aumentar su límite de bloqueo de memoria. Cuando use el RTAI
plataforma en tiempo real no tiene suficientes privilegios, y el usuario debe
elevar el límite de bloqueo de memoria.

Si LinuxCNC muestra el siguiente mensaje al inicio, el problema es
límite configurado de su sistema en memoria bloqueada:

-----
RTAPI: ERROR: no se pudo asignar shmem
RTAPI: el límite de memoria bloqueado es de 32 KB, se recomienda al menos 20480 KB.
-----

Para solucionar este problema, agregue un archivo llamado
`/ etc / security / limits.d / linuxcnc.conf` (como root) con su favorito
editor de texto (por ejemplo, `sudo gedit / etc / security / limits.d / linuxcnc.conf`).
El archivo debe contener la siguiente línea:

-----
* - memlock 20480
-----

Cierre sesión y vuelva a iniciar sesión para que los cambios surtan efecto. Verificalo
el límite de bloqueo de memoria se eleva con el siguiente comando:

-----
> ulimit -l
-----


== Opciones para ver el repositorio de git

Las instrucciones << Inicio rápido, Inicio rápido >> en la parte superior de este
documento que dice hacer un clon local anónimo de nuestro repositorio de git en
http://github.com/linuxcnc/linuxcnc.git. Este es el más rápido y fácil
manera de empezar Sin embargo, hay otras opciones a considerar.


=== Bifurca en Github

El proyecto git repo de LinuxCNC está en http://github.com/LinuxCNC/linuxcnc.
github es un servicio de alojamiento git popular y un sitio web para compartir código.
Puede crear fácilmente (y sin costo) un tenedor de nuestro repositorio de git en github,
y úselo para rastrear y publicar sus cambios.

Después de crear su propia bifurcación github de LinuxCNC, clónela en su
máquina de desarrollo y proceda con su pirateo como de costumbre.

Nosotros, del proyecto LinuxCNC, esperamos que comparta sus cambios con
nosotros, para que la comunidad pueda beneficiarse de su trabajo. Github hace esto
compartir muy fácilmente: después de pulir los cambios y empujarlos a su
tenedor github, envíenos una solicitud de extracción.

