:lang: es

= Construyendo LinuxCNC

== Introducción

Este documento describe cómo construir el software LinuxCNC y
la documentación desde las fuentes. Esto es principalmente útil para un
desarrollador que está modificando LinuxCNC. También puede ser útil para
un usuario que está probando las ramas de desarrollo, aunque entonces también está
la opción de instalar paquetes Debian simplemente desde buildbot:


[[Quick-Start]]
=== Inicio rápido

Si es impaciente, intente esto:

----
> git clone git://github.com/linuxcnc/linuxcnc.git linuxcnc-dev
> cd linuxcnc-dev/src
> ./autogen.sh
> ./configure --with-realtime=uspace
> make
----

¡Eso probablemente fallará!. Eso no es culpas suya, solo
significa que debe leer este documento completamente para averiguar cómo solucionar
algunos problemas. Especialmente la sección sobre <<Satisfying-Build-Dependencies,
Satisfacer Dependencias de Construcción>>.

Si está ejecutando un sistema con capacidad de tiempo real (como una instalación imagen de
LinuxCNC Live/Install), consulte la sección <<_realtime,Tiempo real>> a continuación.
Se necesita un paso de compilación adicional en este caso:

-----
> sudo make setuid
-----
Una vez que haya creado LinuxCNC correctamente, es hora de ejecutar las pruebas:

-----
> source ../scripts/rip-environment
> runtest
-----

¡Esto también podría fallar! Lea todo este documento, pero especialmente la sección
en <<Setting-up-the-environment,Configuración del entorno de prueba>>.


== Plataformas compatibles

El proyecto LinuxCNC se dirije a distribuciones modernas basadas en Debian, que incluyen
Debian, Ubuntu y Mint.

Probamos continuamente en las plataformas listadas en
http://buildbot.linuxcnc.org.

LinuxCNC compila en la mayoría de las otras distribuciones de Linux, aunque 
la administración de dependencias será más manual y menos automática. Siempre son 
bienvenidos parches para mejorar la portabilidad a nuevas plataformas.


=== Tiempo real

LinuxCNC es un controlador de máquina herramienta, y requiere una plataforma en tiempo real
para hacer ese trabajo (n.t. excepto en modo simulador). Esta versión de LinuxCNC admite tres
plataformas en tiempo real

RTAI::

    Disponible en https://www.rtai.org. Un kernel de Linux con el parche RTAI esta
    disponible como archivo Debian en http://www.linuxcnc.org. Ver
    <<cha:getting-linuxcnc, Obteniendo LinuxCNC>> para obtener instrucciones de instalación.

Xenomai::

    Disponible en https://xenomai.org. Tendrá que compilar u obtener un kernel Xenomai
    usted mismo

Preempt-RT ::

    Disponible en  https://rt.wiki.kernel.org. Un kernel de Linux con el
    parche Preempt-RT está ocasionalmente disponible desde Debian
    en https://www.debian.org, y desde wayback machine en
    https://snapshot.debian.org.

Para hacer uso de las capacidades en tiempo real de LinuxCNC, ciertas partes de
LinuxCNC necesita ejecutarse con privilegios de root. Para habilitar root para estas
partes, ejecute este comando extra después del `make` que construye LinuxCNC:

-----
> sudo make setuid
-----


=== Sin tiempo real

LinuxCNC también se puede construirse y ejecutarse en plataformas que no son de tiempo real, como
una instalación regular de Debian o Ubuntu sin ningún kernel especial en tiempo real.

En este modo, LinuxCNC no es útil para controlar máquinas herramientas, pero
es útil para simular la ejecución de código G y para probar
partes del sistema que no son en tiempo real (como las interfaces de usuario y algunos
tipos de componentes y controladores de dispositivos).


== modos de compilación

Hay dos maneras de construir LinuxCNC: la manera preferible para el desarrollador "run in
place" o "ejecucion en el sitio" y la manera preferible para el usuario, con paquetes Debian.



=== Construccion "run in place" (RIP)

En una compilación Run-In-Place o RIP, los programas de LinuxCNC se compilan desde las fuentes
y luego se ejecutan directamente desde dentro del directorio de compilación. Nada queda
instalado fuera de ese directorio.

Esto es rápido y fácil, y adecuado para una rápida sucesion de cambios.

El conjunto de pruebas de LinuxCNC solo se ejecuta en una compilación RIP.

La mayoría de los desarrolladores de LinuxCNC usan principalmente este modo.

La construccion Run-In-Place sigue los pasos de la seccion <<Quick-Start,Inicio rápido>> en la parte superior de este documento, posiblemente con diferentes argumentos para `src/configure` y` make`.


[[src-configure-arguments]]
==== Argumentos de `src/configure` 

El script `src/configure` configura cómo será compilado el código fuente.
Usa muchos argumentos opcionales.

Liste todos los argumentos de `src/configure` ejecutando esto:

-----
> cd linuxcnc-dev/src
> ./configure --help
-----

Los argumentos más comúnmente utilizados son:

`--with-realtime=uspace`::

    Construccion para cualquier plataforma en tiempo real, o para tiempo no real.
    Los ejecutables LinuxCNC resultantes se ejecutarán en un kernel de Linux
    con parches Preempt-RT (que proporcionan control de la máquina en tiempo real) y
    en un kernel Linux estandar (no parcheado, que proporciona simulación de código G
    pero no control de máquina en tiempo real). Si los archivos de desarrollo están instalados
    para Xenomai (típicamente del paquete libxenomai-dev) o RTAI (típicamente
    de un paquete con un nombre que comienza en "rtai-modules"), también estará habilitado soporte
    para estos kernels en tiempo real .

`--with-realtime=/usr/realtime-$VERSION`::

    Construccion para la plataforma RTAI en tiempo real usando el antiguo modelo "kernel en tiempo real".
    Esto requiere que usted tenga un kernel RTAI y los módulos RTAI instalados en
    `/usr/realtime-$VERSION`. Los ejecutables LinuxCNC resultantes
    solo se ejecuta en el kernel RTAI especificado. A partir de LinuxCNC 2.7, esto
    produce el mejor rendimiento en tiempo real.

`--enable-build-documentation`::

    Construccion de la documentación, además de los ejecutables. Esta opción
    aumenta significativamente el tiempo requerido para la compilación, ya que
    los documentos consumen mucho tiempo. Si no está trabajando activamente
    en la documentación es posible que desee omitir este argumento.


[[make-arguments]]
==== argumentos de 'make'

El comando `make` admite dos argumentos opcionales útiles.


Compilación paralela::

    `make` toma un argumento opcional` -jN` (donde N es un número).
    Esto permite la compilación paralela con N procesos simultáneos, que
    puede acelerar su construcción significativamente.
+
Un valor útil para N es la cantidad de CPU en su sistema de compilación. Usted puede
descubrir la cantidad de CPU ejecutando `nproc`.


Construccion de un objetivo específico::

    Si desea construir solo una parte específica de LinuxCNC, puede nombrar
    lo que desea construir en la línea de comando `make`. Por ejemplo,
    si está trabajando en un componente llamado `froboz`, puede construir su
    ejecutable mediante:
+
-----
> cd linuxcnc-dev/src
> make ../bin/froboz
-----


=== Construir Paquetes Debian

Al compilar paquetes Debian, los programas LinuxCNC se compilan a partir de
las fuentes y luego se almacenan en un paquete Debian completo con informacion
de dependencias. Esto lleva más tiempo, y los programas no pueden usarse hasta que
el paquete Debian esté instalado en la máquina de destino.

Este modo de compilación es principalmente útil al empaquetar el software para
entregarlo a los usuarios finales, y construir el software para una máquina
que no tiene el entorno de compilación instalado, o que no tiene
acceso a Internet.

La creación de paquetes Debian requiere la herramienta `dpkg-buildpackage`, del
paquete `dpkg-dev`:

-----
> sudo apt-get install dpkg-dev
-----
La construcción de paquetes de Debian también requiere que todas las dependencias de compilación esten
instaladas, tal como se describe en la sección <<Satisfying-Build-Dependencies,
Satisfacer Dependencias de construcción>>.

Una vez que se cumplen esos requisitos previos, la construcción de los paquetes de Debian consiste en
dos pasos.

El primer paso es generar las secuencias de comandos del paquete Debian y los metadatos
desde el repositorio git ejecutando:

-----
> cd linuxcnc-dev/debian
> ./configure uspace
> cd ..
-----

[NOTE]
=====
El script `debian/configure` es diferente de `src/configure`

El script `debian/configure` necesita diferentes argumentos según la
plataforma en/para la que está construyendo, vea la seccion <<debian-configure-arguments,
`argumentos de debian/configure`>>.
=====

Una vez que los scripts y los metadatos del paquete Debian están configurados, construya el
paquete ejecutando `dpkg-buildpackage` (tenga en cuenta que debe ejecutarse desde
el directorio `linuxcnc-dev`, *no* desde `linuxcnc-dev/debian`):

-----
> dpkg-buildpackage -b -uc
-----


[[debian-configure-arguments]]
==== argumentos de `debian/configure`

El script `debian/configure` configura el paquete Debian. Debería
ejecutarse antes de que puedan ejecutarse `dpkg-checkbuilddeps` y` dpkg-buildpackage`.

Se necesita un único argumento que especifique la plataforma a construir; con o sin tiempo real.
Los valores normales para este argumento son:

`uspace`::

    Configura el paquete Debian para Preempt-RT en tiempo real o para
    sin tiempo real (estos dos son compatibles).

`noauto`::
`rtai`::
`xenomai`::

    Normalmente, se detectan los RTOS soportados para el espacio en tiempo real
    automáticamente. Sin embargo, si lo desea, puede especificar uno o más de estos
    después de `uspace` para habilitar el soporte para estos RTOSs. O bien, para deshabilitar
    autodetección, especifique `noauto`.

    Si solo desea el "módulo kernel" RTAI tradicional en tiempo real, use
    `-r` o` $KERNEL_VERSION` en su lugar.

`rtai=<nombre del paquete>`::

    Si el paquete de desarrollo para rtai lxrt no comienza con
    "rtai-modules", o si el primer paquete mencionado por apt-cache search
    no es el deseado, especifique explícitamente el nombre del paquete.

`-r` ::

    Configurar el paquete Debian para el kernel RTAI actualmente en ejecución.
    Debe ejecutar un kernel RTAI en su máquina de compilación para que esto funcione.

`$KERNEL_VERSION`::

    Configurar el paquete Debian para la versión del kernel RTAI especificada
    (por ejemplo "3.4.9-rtai-686-pae"). Los encabezados del kernel coincidentes
    con el paquete Debian debe estar instalado en su máquina de compilación (por ejemplo
    "linux-headers-3.4.9-rtai-686-pae"). Tenga en cuenta que puede construir
    LinuxCNC en esta configuración, pero si no está ejecutando el
    kernel RTAI coincidente, no podrá ejecutar LinuxCNC, incluyendo
    las pruebas.

[[Satisfying-Build-Dependencies]]
== Satisfacer Dependencias de Construcción

En las plataformas basadas en Debian, proporcionamos metadatos de empaquetado que saben
qué paquetes de software externos deben instalarse para construir
LinuxCNC. Estas son las llamadas "Build Dependencies" de LinuxCNC. Usted puede
utilizar estos metadatos para enumerar fácilmente los paquetes requeridos que faltan en
su sistema de compilación

Los sistemas Debian proporcionan un programa llamado `dpkg-checkbuilddeps` que
analiza los metadatos del paquete y compara los paquetes enumerados como dependencias de
compilación contra la lista de paquetes instalados, y le dice
lo que falta

Primero, instale el programa `dpkg-checkbuilddeps` ejecutando:

-----
> sudo apt-get install dpkg-dev
-----

Luego, solicite a su cuenta de git de LinuxCNC que genere los metadatos del paquete Debian:

-----
> cd linuxcnc-dev/debian
> ./configure uspace
> cd ..
-----

Finalmente, pida a `dpkg-checkbuilddeps` que haga su trabajo (tenga en cuenta que necesita
ejecutarlo desde el directorio `linuxcnc-dev`, *no* desde` linuxcnc-dev/debian`):

-----
> dpkg-checkbuilddeps
-----

Se emitirá una lista de paquetes necesarios para construir LinuxCNC
en su sistema, pero que aún no están instalados. Instálelos todos con
`sudo apt-get install`, seguido de los nombres del paquete.

Puede volver a ejecutar `dpkg-checkbuilddeps` en cualquier momento que desee, para enumerar cualquier
paquetes faltante.


[[Setting-up-the-environment]]
== Setting up the environment

Esta sección describe los pasos especiales necesarios para configurar una máquina para
ejecutar los programas de LinuxCNC, incluidas las pruebas.


=== Aumentar el límite de bloqueo de memoria

LinuxCNC intenta mejorar su latencia en tiempo real bloqueando la memoria
utiliza en la memoria RAM. Hace esto para evitar que el sistema operativo
intercambie LinuxCNC en el disco, lo que tendría efectos negativos en la latencia.

Normalmente, bloquear la memoria en la RAM está mal visto y el sistema operativo
establece un límite estricto sobre la cantidad de memoria que un usuario puede bloquear.

Al usar la plataforma Preempt-RT en tiempo real, LinuxCNC funciona con suficiente
privilegio para aumentar su límite de bloqueo de memoria por sí mismo. Cuando se usa RTAI
como plataforma en tiempo real no tiene suficiente privilegio, y el usuario debe
elevar el límite de bloqueo de memoria.

Si LinuxCNC muestra el siguiente mensaje al inicio, el problema es
el límite configurado de su sistema en la memoria bloqueada:

-----
RTAPI: ERROR: failed to map shmem
RTAPI: Locked memory limit is 32KiB, recommended at least 20480KiB.
-----

Para solucionar este problema, agregue un archivo llamado
`/etc/security/limits.d/linuxcnc.conf` (como root) con su
editor de texto (por ejemplo, `sudo gedit /etc/security/limits.d/linuxcnc.conf`).
El archivo debe contener la siguiente línea:

-----
* - memlock 20480
-----
Cierre sesión y vuelva a iniciarla para que los cambios entren en vigencia. Comprueba que
límite de bloqueo de la memoria se genera con el siguiente comando:

-----
> ulimit -l
-----


== Opciones para consultar el repositorio git

Las instrucciones <<Quick-Start, Inicio rápido>> en la parte superior de este
documento decian como hacer un clon local anónimo de nuestro repositorio git en
http://github.com/linuxcnc/linuxcnc.git. Este es la forma de comenzar más rápida y fácil.
Sin embargo, hay otras opciones a considerar.

=== Bifurcacion en Github

El repositorio git del proyecto LinuxCNC está en http://github.com/LinuxCNC/linuxcnc.
github es un popular servicio de alojamiento git y sitio web para compartir códigos.
Usted puede (sin costo) crear fácilmente una 'bifurcacion' (fork) de nuestro repositorio en github,
y usar eso para rastrear y publicar sus cambios.

Después de crear su propio "fork github" de LinuxCNC, clonelo en su
máquina de desarrollo y proceda con sus modificaciones como de costumbre.

Nosotros, en el proyecto LinuxCNC, esperamos que comparta sus cambios, para que la comunidad
pueda beneficiarse de su trabajo. Github hace muy fácil compartir; después de pulir sus cambios y
subirlos a su fork github, envíenos una solicitud de extracción Pull Request.
