.\" Man page for hal_manualtoolchange userspace component.
.\" Written 12 APR 2017 by Joe Hildreth (joeh@threerivershospital.com)
.\"
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\"
.\" The GNU General Public License's references to "object code"
.\" and "executables" are to be interpreted as the output of any
.\" document formatting or typesetting system, including
.\" intermediate and printed output.
.\"
.\" This manual is distributed in the hope that it will be useful,
.\" but WITHOUT ANY WARRANTY; without even the implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\" GNU General Public License for more details.
.\"
.\" You should have received a copy of the GNU General Public
.\" License along with this manual; if not, write to the Free
.\" Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,
.\" USA.
.TH hal_parport 1 "12 APR 2017" "Documentación de LinuxCNC" "Componente HAL Realtime"
.SH NOMBRE
hal_parport \- Componente HAL en tiempo real para comunicarse con uno o más puertos paralelos de la PC.
.SH SINOPSIS
.B loadrt hal_parport cfg="\fIport_addr\fR[\fItype\fR] [[\fIport_addr\fR[\fItype\fR] ...]\fB"
.SH DESCRIPCIÓN
El componente hal_parport es un componente en tiempo real que proporciona conexiones HAL a través de pines a 
los pines físicos de uno o más puertos paralelos. Proporciona una función de lectura y escritura para enviar y recibir 
datos a los puertos paralelos conectados.
.PP
El componente hal_parport admite hasta \fB8 \fRpuertos paralelos físicos.
.SH OPCIONES
.TP
.B cfg="port_addr [tipo] [[port_addr [tipo] ...]"

La cadena cfg le dice a hal_parport las direcciones de los puertos paralelos y si los puertos se utilizan como 
puertos de entrada o de salida. El componente admite hasta ocho puertos paralelos.

El parámetro \fBport_addr\fR de la cadena de configuración puede ser la dirección física base de un puerto paralelo 
o especificada como el puerto paralelo detectado a través del controlador Linux parport_pc. En ese caso, 
un \fBport_addr\fR de \fI0\fR es el primer puerto paralelo detectado en el sistema, \fI1\fR es el siguiente, 
y así sucesivamente.

El parámetro\fBtipo\fR de la cadena de configuración determina cómo se utilizan los bits de E/S del puerto. 
Hay cuatro opciones posibles y si no se especifica ninguna, será out por defecto.

\fIin\fR\ - Establece los 8 bits del puerto de datos para entrada. En este modo, el puerto paralelo tiene un 
total de 13 pines de entrada y 4 pines de salida.

\fIout\fR\ - Establece los 8 bits del puerto de datos para salida. En este modo, el puerto paralelo tiene un 
total de 5 pines de entrada y 12 pines de salida.

\fIepp\fR\ - Esta opción es igual a la configuración out, pero puede hacer que la computadora cambie las 
características eléctricas del puerto. (\fIVea USO mas abajo\fR.)

\fIx\fR\ - Esta opción permite que los puertos con "open collector" en las patillas del grupo de control se 
configuren como entradas, lo que da como resultado 8 pines de salida y 9 pines de entrada. (\fIVea USO mas abajo\fR.)
.SH PINS
.TP
Los pines creados por el componente hal_parport dependen de cómo se configure en la cadena \fBcfg=""\fR que se 
le haya pasado. (\fI Vea OPCIONES\fR.)

\fBparport.<p>.pin\-<n>\-out (bit)\fR conduce un pin de salida física.

\fBparport.<p>.pin\-<n>\-in (bit)\fR rastrea un pin de entrada física.

\fBparport.<p>.pin\-<n>\-in\-not (bit)\fR rastrea un pin de entrada física, pero inviertido.

Para cada pin creado,\fB <p>\fR es el número de puerto, y\fB <n>\fR es el número de pin físico en el 
conector D\-shell de 25 pines.

Para cada pin de salida física, el controlador crea un solo pin HAL, por ejemplo: \fBparport.0.pin\-14\-out\fR.

Para cada pin de entrada física, el controlador crea dos pines HAL, por ejemplo: 
\fBparport.0.pin\-12\-in\fR y \fBparport.0.pin\-12\-in\-not\fR.

El pin \fB\-in\fR HAL es TRUE si el pin físico es alto, y FALSE si el pin físico es bajo. 
El pin \fB\-in\-not\fR HAL está invertido y es FALSE si el pin físico es alto (TRUE).

A continuación se enumeran los pines de entrada y salida según la configuración de tipo utilizada en la 
cadena cfg="".

\fBin\fR: los pines 2,3,4,5,6,7,8,9,10,11,12,13,15 son pines de entrada y los pines 1,14,16 y 17 son pines de salida.

\fBout/epp\fR: los pines 10, 11, 12, 13 y 15 son pines de entrada y los pines 1,2,3,4,5,6,7,8,9,14,16 y 17 son 
pines de salida.

\fBx\fR: los pines 1,10,11,12,13,14,15,16 y 17 son pines de entrada y los pines 2,3,4,5,6,7,8,9 son pines de salida. 
(\ fVer sección USO\fR.)
.SH PARÁMETROS
.TP
\fBparport.<p>.pin\-<n>\-out\-invert (bit)
\fR Invierte un pin de salida.
.TP
\fBparport.<p>.pin\-<n>\-out\-reset (bit)
\ fR (solo para los pines out) TRUE si este pin se debe reiniciar cuando se ejecuta la función .reset.
.TP
\fBparport.<p>.reset\-time'(U32)
\ fREl tiempo (en nanosegundos) entre que un pin se establece mediante escritura y se restablece mediante la función de 
restablecimiento si está habilitada.
.SH FUNCIONES
.TP
\fBparport.<p>.read(funct)
\ fRLee los pines de entrada física del puerto <portnum> y actualiza los pines HAL \-in y \-in\-not.
.TP
\fBparport.read\-all(funct)
Lee los pines de entrada física de todos los puertos y actualiza los pines HAL \-in y \-in\-not.
.TP
\fBparport.<p>.write(funct)
Lee pines HAL \-out del puerto <p> y actualiza los pines de salida física del puerto.
.TP
\fBparport.write\-all(funct)
Lee pines HAL\-out de todos los puertos y actualiza todos los pines de salida física.
.TP
\fBparport.<p>.reset(funct)
Espera a que transcurra \fIreset\-time\fR desde la escritura asociada, luego restablece los pines a los valores 
indicados por \fI\-out\-reset\fR y \fI\-out\-invert\fR. Un reset debe hacerse más tarde en el 
mismo hilo que escribio. Si \fI\-out\-reset\fR es TRUE, la función de reset establecerá el pin en 
el valor \fI\-out\-invert\fR. Esto puede usarse junto con el doublefreq de stepgen para producir un paso por 
período. El espacio de pasos de stepgen para ese pin debe establecerse en 0 para habilitar doublefreq.
.SH USO
El componente hal_parport es un controlador para el puerto paralelo PC tradicional. El puerto tiene un total de 
25 pines físicos, de los cuales 17 se usan para señales. El puerto paralelo original dividió esos pines en tres 
grupos: datos, control y estado. El grupo de datos consta de 8 pines de salida, el grupo de control consta de 4 
pines de salida y el grupo de estado consta de 5 pines de entrada.

A principios de la década de los 90, se introdujo el puerto paralelo bidireccional, que permite que el grupo de datos 
se use para la salida o la entrada. El controlador HAL admite el puerto bidireccional y permite al usuario configurar 
el grupo de datos como entrada o salida. Si se configura como \fIout\fR, un puerto proporciona un total de 12 
salidas y 5 entradas. Si se configura como \fIin\fR, proporciona 4 salidas y 13 entradas.

En algunos puertos paralelos, los pines del grupo de control son colectores abiertos, que también pueden ser 
conducidos FALSE por una puerta externa. En una placa con pines de control de colector abierto, si está 
configurado como \fIx\fR, proporciona 8 salidas y 9 entradas.

En algunos puertos paralelos, el grupo de control tiene controladores push-pull y no se pueden usar como entrada.
.TP
\fBNota: HAL y colectores abiertos
HAL no puede determinar automáticamente si los pines bidireccionales del modo x son en realidad colectores abiertos (OC).
Si no lo son, no pueden usarse como entradas, e intentar conducirlos FALSE desde una fuente externa puede dañar el 
hardware.

Para determinar si su puerto tiene pines de colector abiertos, cargue hal_parport en el modo x. Sin ningun dispositivo 
conectado, HAL debería leer el pin como TRUE. Luego, inserte una resistencia de 470 ohmios desde uno de los pines de 
control a GND. Si el voltaje resultante en el pin de control está cerca de 0V, y HAL ahora lee el pin como FALSE, 
entonces usted tiene un puerto de colector abierto. Si el voltaje resultante está lejos de 0V, o HAL no lee el pin como 
FALSE, entonces su puerto no se puede usar en el modo x.

El hardware externo que controla los pines de control también debe usar compuertas de colector abierto (p. Ej., 74LS05).

En algunas computadoras, la configuración del BIOS puede afectar si se puede usar el modo x. El modo SPP es más probable 
que funcione.
.PP
No se admiten otras combinaciones, y un puerto no se puede cambiar de entrada a salida una vez que se instala el 
controlador.

El controlador parport puede controlar hasta 8 puertos (definidos por MAX_PORTS en hal_parport.c). Los puertos están 
numerados comenzando en cero.
.TP
\fBCargando el componente hal_parport

El controlador hal_parport es un componente de tiempo real, por lo que debe cargarse en el hilo de tiempo real con 
loadrt. La cadena de configuración describe los puertos paralelos que se utilizarán y (opcionalmente) sus tipos. 
Es un error si la cadena de configuración no describe al menos un puerto.

\fBloadrt hal_parport cfg="puerto [tipo] [puerto [tipo] ...]"
.TP
\fB Especificar el puerto

Los números inferiores a 16 se refieren a puertos paralelos detectados por el sistema. Esta es la forma más sencilla de 
configurar el controlador hal_parport y coopera con el controlador parport_pc de Linux si está cargado. Un puerto 0 
es el primer puerto paralelo detectado en el sistema, 1 es el siguiente, y así sucesivamente.
.TP
\fBConfiguración básica

Esto usará el primer puerto paralelo que Linux detecta:

     \fBloadrt hal_parport cfg="0"
.TP
\fBUsar la dirección del puerto

En cambio, la dirección del puerto puede especificarse usando la notación hexadecimal 0x y luego la dirección.

     \fBloadrt hal_parport cfg="0x378"
.TP
\fB Especificar un tipo de puerto

Para cada puerto paralelo manejado por el controlador hal_parport, se puede especificar un tipo opcionalmente. El tipo 
es uno de in, out, epp o x.

Si no se especifica el tipo, el valor predeterminado es out.

Un tipo epp es igual a out, pero el controlador hal_parport solicita que el puerto cambie al modo EPP. El controlador 
hal_parport no utiliza el protocolo de bus EPP, pero en algunos sistemas el modo EPP cambia las características 
eléctricas del puerto de una manera que puede hacer que algún hardware marginal funcione mejor. Se sabe que la bomba 
de carga de Gecko G540 lo requiere en algunos puertos paralelos.

Consulte la Nota anterior sobre el modo x.
.TP
\fBEjemplo con dos puertos paralelos

Esto habilitará dos puertos paralelos detectados por el sistema, el primero en modo de salida y el segundo en modo de 
entrada:

     \fBloadrt hal_parport cfg="0 out 1 in"
.TP
\ fBFunciones de puerto único

También debe informar a LinuxCNC sobre la ejecucion de las funciones de lectura y escritura.

     \fBaddf parport.read\-all base\-thread
     \fBaddf parport.write\-all base\-thread
.TP
\ fBFuncion varios puertos

Puede informar a LinuxCNC sobre la ejecucion de lectura y escritura para todos los puertos conectados.

     \fBaddf parport.0.read base\-thread
     \fBaddf parport.0.write base\-thread

\ fRLas funciones individuales se proporcionan para situaciones en las que un puerto necesita actualizarse en un 
subproceso muy rápido, pero otros puertos se pueden actualizar en un subproceso más lento para ahorrar tiempo de CPU. 
Probablemente no sea una buena idea utilizar una función \-all y una función individual al mismo tiempo.
.SH VEA TAMBIÉN
Controlador de puerto paralelo (Sección Controladores de hardware de LinuxCNC Docs) Ejemplo de puerto paralelo PCI 
(Sección de ejemplos de hardware de LinuxCNC Docs)
.SH AUTOR
Esta página de manual escrita por Joe Hildreth como parte del proyecto LinuxCNC. La mayoría de esta información se 
tomó de los documentos de puerto paralelo ubicados en la sección Controladores de hardware de la documentación. 
Que se sepa, la documentación fue escrita por Sebastian Kuzminsky y Chris Radek.