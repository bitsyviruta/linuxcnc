.\" Copyright (c) 2003 John Kasunich
.\"                (jmkasunich AT users DOT sourceforge DOT net)
.\"
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\"
.\" The GNU General Public License's references to "object code"
.\" and "executables" are to be interpreted as the output of any
.\" document formatting or typesetting system, including
.\" intermediate and printed output.
.\"
.\" This manual is distributed in the hope that it will be useful,
.\" but WITHOUT ANY WARRANTY; without even the implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\" GNU General Public License for more details.
.\"
.\" You should have received a copy of the GNU General Public
.\" License along with this manual; if not, write to the Free
.\" Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301,
.\" USA.
.\"
.\"
.\"
.de URL
\\$2 \(laURL: \\$1 \(ra\\ $3
..
.if \n[.g] .mso www.tmac
.TH HALCMD "1" "2003-12-18" "Documentación de LinuxCNC" "Manual de usuario de HAL"
.SH NOMBRE
halcmd \- manipular HAL de LinuxCNC desde la línea de comando
.SH SINOPSIS
.B halcmd
[\FIOPTIONS\fR] [\fICOMMAND\fR [\fIARG\fR]]
.PP
.SH DESCRIPCIÓN
\fBhalcmd\fR se usa para manipular HAL (Capa de abstracción de hardware)
desde la línea de comando. \fBhalcmd\fR puede leer opcionalmente
comandos de un archivo, lo que permite configuraciones de HAL complejas
con un solo comando.

Si la biblioteca \fBreadline\fR está disponible cuando se compila LinuxCNC, entonces
\fBhalcmd\fR ofrece edición y finalización de línea de comandos cuando se ejecuta
interactivamente. Use la flecha hacia arriba para recuperar comandos anteriores y presione tab para
completar los nombres de elementos tales como pines y señales.
.SH OPCIONES
.TP
\fB\-I\fR
Antes de deshacer el entorno en tiempo real, ejecuta un halcmd interactivo.
Solo \fBhalrun\fR. Si se usa \fB\-I\fR, debe preceder a todos los demás
argumentos de línea de comando.
.TP
\fB\\-f\fR [\fIfile\fR]
Ignorar comandos en línea de comandos, tomar entrada de \fIfile\fR
en su lugar. Si \fIfile\fR no está especificado, tomar la información de
\fIstdin\fR.
.TP
\fB\-i\fIinifile\fR
Usar variables de \fIinifile\fR para sustituciones. Ver \fBSUBSTITUCIONES\fR
mas abajo.
.TP
\fB\\-k\fR
Sigue adelante después de comandos fallidos. El valor predeterminado es detener
y retornar si falla algún comando.
.TP
\fB\\-q\fR
Mostrar solo errores (predeterminado)
.TP
\fB\\-Q\fR
no muestra nada, ejecuta comandos silenciosamente
.TP
\fB\\-s\fR
Modo de escritura amigable. En este modo, \fIshow\fR no generará títulos para los elementos
mostrados. Además, se imprimirán los nombres de los módulos en lugar de los códigos de ID en pin, param y funct
en los listados. Los hilos se imprimen en una sola línea, con el período del hilo, el uso de FP y
nombre primero, seguido de todas las funciones en el hilo, en orden de ejecución. Las señales
se imprimen en una sola línea, con el tipo, el valor y el nombre de la señal en primer lugar, seguidos de
una lista de pines conectados a la señal, mostrando tanto la dirección como el nombre del pin.
.TP
\fB\-R\fR
Libera el mutex HAL. Esto es útil para recuperarse de un componente HAL que se ha bloqueado
mientras poseia el mutex HAL.
.TP
\fB\\-v\fR
mostrar los resultados de cada comando
.TP
\fB\\-V\fR
mostrar un montón de info de depuración
.TP
\fB\\-h\fR [\fIcommand\fR]
mostrar una pantalla de ayuda y salir, muestra la ayuda extendida de un \fIcomando\fR si se especifica
.SH COMANDOS
Los comandos le dicen a \fBhalcmd\fR qué hacer. Normalmente \fBhalcmd\fR
lee un solo comando de la línea de comando y lo ejecuta.
Si se usa la opción '\fB\-f\fR' para leer comandos de un archivo,
\fBhalcmd\fR lee cada línea del archivo como un nuevo comando.
Cualquier cosa que siga a '\fB#\fR' en una línea, es un comentario.
.TP
\fBloadrt\fR \fImodname\fR
(\fIcargar\fR módulo \fIr\fReal\fIt\fRime) Carga un módulo HAL de tiempo real
llamado \fImodname\fR. \fBhalcmd\fR busca el módulo
en el directorio especificado en tiempo de compilación.

En sistemas con tiempo real, \fBhalcmd\fR llama a
\fBlinuxcnc_module_helper\fR para cargar módulos en tiempo real.
\fBlinuxcnc_module_helper\fR es un programa setuid y se compila con
una lista blanca de módulos que puede cargar. Esta es actualmente
solo una lista de módulos relacionados con \fBLinuxCNC\fR.
\fBlinuxcnc_module_helper\fR ejecuta insmod, así que devuelve códigos y mensajes de error
de insmod. El administrador puede
restringir qué usuarios pueden cargar estos módulos kernel \fBLinuxCNC\fR relacionado
los que pueden hacer esto, configurando los permisos y grupo en
\fBlinuxcnc_module_helper\fR apropiadamente.

En sistemas sin tiempo real \fBhalcmd\fR llama a
\fBrtapi_app\fR que crea el entorno simulado en tiempo real
si aún no existía, y luego carga el componente solicitado
con una llamada a \fBdlopen(3)\fR.
.TP
\fBunloadrt\fR \fImodname\fR
(\fIunload\fR modulo \fIr\fReal \fIt\fRime). Descarga un módulo HAL de tiempo real 
llamado \fImodname\fR. Si \fImodname\fR es "all",
descargara todos los módulos HAL en tiempo real cargados actualmente. \fBunloadrt\fR
también funciona al ejecutar \fBlinuxcnc_module_helper\fR o \fBrtapi_app\fR, al igual que
\fBloadrt\fR.
.TP
\fBloadusr\fR \fI[flags]\fR \fIunix-command\fR
(\fIload\fR componente \fIUs\fRe \fIr\fRspace). Ejecuta el 
\fIunix-command\fR dado, generalmente para cargar un componente de espacio de usuario.
\fI [flags]\fR puede ser uno o más de:
.RS
.IP \(bu 4
\fB\-W\fR para esperar a que el componente esté listo. El componente
se supone que tiene el mismo nombre que el primer argumento del comando.
.IP \(bu 4
\fB\-Wn name\fR para esperar el componente, que tendrá el nombre dado.
.IP \(bu 4
\fB\-w\fR esperar a que el programa salga
.IP \(bu 4
\fB\-i\fR para ignorar el valor de retorno del programa (con \-w)
.RE
.TP
\fBwaitusr\fR \fIname\fR
(\fIwait\fR para componente \fIUs\fRe\fIr\fRspace) Espera a que un componente de espacio de usuario
\fIname\fR se desconecte de HAL (generalmente al salir).
El componente ya debe estar cargado. Útil cerca del final de un
archivo HAL para esperar hasta que el usuario cierre algún componente de interfaz de usuario
antes de limpiar y salir.
.TP
\fBunloadusr\fR \fIcompname\fR
(\fIunload\fR componente \fIUs\fRe\fIr\fRspace). Descarga el componente \fIcompname\fR
de espacio de usuario. Si \fIcompname\fR es "all",
descarga todos los componentes de espacio de usuario. \fBunloadusr\fR
funciona enviando SIGTERM a todos los componentes del espacio de usuario.
.TP
\fBunload\fR \fIcompname\fR
Descarga un componente de espacio de usuario o módulo en tiempo real. If \fIcompname\fR es "all",
descargará todos los componentes del espacio de usuario y los módulos en tiempo real.
.TP
\fBnewsig\fR \fIsigname\fR \fItype\fR
(OBSOLETO: use \fBnet\fR en su lugar) (\fInew\fR \fIsig\fRnal)
Crea una nueva señal HAL llamada \fIsigname\fR que puede ser utilizada más tarde
para conectar dos o más pines de componentes HAL. \fItype\fR
es el tipo de datos de la nueva señal, y debe ser "\fBbit\fR",
"\fBs32\fR", "\fBu32\fR" o "\fBfloat\fR".
Falla si ya existe una señal del mismo nombre.
.TP
\fBdelsig\fR \fIsigname\fR
(\fIdel\fRete \fIsig\fRnal) Elimina la señal HAL \fIsigname\fR.
Cualquier pin actualmente vinculado a la señal se desvinculará.
Falla si \fIsigname\fR no existe.
.TP
\fBsets\fR \fIsigname\fR \fIvalue\fR
(\fIset\fR \fIs\fRignal) Establece el valor de la señal \fIsigname\fR
a \fIvalue\fR. Falla si \fIsigname\fR no existe, si
ya tiene un escritor, o si \fIvalue\fR no es un valor legal.
Los valores legales dependen del tipo de señales.
.TP
\fBstype\fR \fIname\fR
(\fIs\fRignal type\fR) Obtiene el tipo de señal
\fIname\fR. Falla si \fIname\fR no existe como señal.
.TP
\fBgets\fR \fIsigname\fR
(\fIget\fR \fIs\fRignal) Obtiene el valor de la señal \fIsigname\fR. Falla
si \fIsigname\fR no existe.
.TP
\fBlinkps\fR \fIpinname\fR [\fIarrow\fR] \fIsigname\fR
(OBSOLETO - use \fBnet\fR en su lugar) (\fIlink\fR \fIp\fRin a \fIs\fRignal)
Establece un enlace entre un pin de componente HAL \fIpinname\fR y
una señal HAL \fIsigname\fR. Cualquier enlace previo a \fIpinname\fR será
roto. \fIArrow\fR puede ser "\fB=>\fR", "\fB<=\fR", "\fB<=>\fR",
u omitido. \fBhalcmd\fR ignora las flechas, pero pueden ser útiles
en archivos de comando para documentar la dirección del flujo de datos. Las flechas
no debe usarse en la línea de comando ya que el intérprete de comandos podría intentar
interpretarlas. Falla si \fIpinname\fR o \fIsigname\fR
no existe, o si no son del mismo tipo.
.TP
\fBlinksp\fR \fIsigname\fR [\fIarrow\fR] \fIpinname\fR
(OBSOLETO - use \fBnet\fR en su lugar) (\fIlink\fR \fIs\fRignal a \fIp\fRin)
Funciona como \fBlinkps\fR pero invierte el orden de los argumentos.
\fBhalcmd\fR trata ambos comandos de enlace exactamente de la misma manera. Use cualquiera de ambos.
.TP
\fBlinkpp\fR \fIpinname1\fR [\fIarrow\fR] \fIpinname2\fR
(OBSOLETO - use \fBnet\fR en su lugar) (\fIlink\fR \fIp\fRin a \fIp\fRin)
Acceso directo para \fBlinkps\fR que crea la señal (llamada como el
primer pin), luego vincula a ambos a esa señal. \fBhalcmd\fR trata
esto como:
   \fBhalcmd\fR \fBnewsig\fR pinname1
   \fBhalcmd\fR \fBlinksp\fR pinname1 pinname1
   \fBhalcmd\fR \fBlinksp\fR pinname1 pinname2
.TP
\fBnet\fR \fIsigname\fR \fIpinname\fR \fI...\fR
Crea la señal \fIsignname\fR para que coincida con el tipo del pin \fIpinname\fR, si aún no existe. 
Luego, vincula \fIsigname\fR a cada \fIpinname\fR por turno. Las flechas pueden
utilizarse como en \fBlinkps\fR. Al vincular un pin a una señal por primera vez, 
el valor de la señal heredará el valor predeterminado del pin.

.TP
\fBunlinkp\fR \fIpinname\fR
(\fIunlink\fR \fIp\fRin) Rompe cualquier enlace previo a \fIpinname\fR.
Falla si \fIpinname\fR no existe. Un pin desvinculado retendrá el último
valor de la señal a la que estaba vinculado.

.TP
\fBsetp\fR \fIname\fR \fIvalue\fR
(\fIset\fR \fIp\fRarameter o \fIp\fRin) Establece el valor del parámetro o pin
\fIname\fR a \fIvalue\fR. Falla si \fIname\fR no existe como un pin o
parámetro, si es un parámetro que no se puede escribir, si es un pin que es de
salida, si es un pin que ya está conectado a una señal, o si \fIvalue\fR
no es un valor legal. Los valores legales dependen del tipo de pin o parámetro.
Si existe un pin y un parámetro con el mismo nombre,se actúa en el parámetro.
.TP
\fIparamname\fR \fB=\fR \fIvalue\fR
.TP
\fIpinname\fR \fB=\fR \fIvalue\fR
Idéntico a \fBsetp\fR. Esta forma alternativa del comando puede
ser más conveniente y legible cuando se usa en un archivo.
.TP
\fBptype\fR \fIname\fR
(\fIp\fRarameter o \fIp\fRin \fItype\fR). Obtiene el tipo de parámetro o
pin \fIname\fR. Falla si \fIname\fR no existe como un pin o
parámetro. Si existe un pin y un parámetro con el mismo nombre, se actúa sobre el
parámetro.
.TP
\fBgetp\fR \fIname\fR
(\fIget\fR \fIp\fRarameter o \fIp\fRin) Obtiene el valor del parámetro o
pin \fIname\fR. Falla si \fIname\fR no existe como pin o
parámetro. Si existe un pin y un parámetro con el mismo nombre,
se actúa sobre el parámetro.
.TP
\fBaddf\fR \fIfunctname\fR \fIthreadname\fR
(\fIadd\fR \fIf\fRunction) Agrega la función \fIfunctname\fR a thread de tiempo real
\fItreadname\fR. \fIfunctname\fR se ejecutará después de cualquier función
que se agrego previamente al hilo. Falla si cualquiera
\fIfunctname\fR o \fIthreadname\fR no existe, o si
son incompatibles
.TP
\fBdelf\fR \fIfunctname\fR \fIthreadname\fR
(\fIdel\fRete \fIf\fRunction) Elimina la función \fIfunctname\fR deun hilo
de tiempo real \fIthreadname\fR. Falla si \fIfunctname\fR o
\fIthreadname\fR no existe, o si \fIfunctname\fR no es actualmente
parte de \fIthreadname\fR.
.TP
\fBstart\fR
Inicia la ejecución de hilos en tiempo real. Cada hilo llama periódicamente a
todas las funciones que se le agregaron con el comando \fBaddf\fR,
en el orden en que fueron agregadas.
.TP
\fBstop\fR
Detiene la ejecución de los hilos en tiempo real. Los hilos ya no llamarán a
sus funciones.
.TP
\fBshow\fR [\fIitem\fR]
Imprime elementos HAL en \fIstdout\fR en formato legible para humanos.
\fItem\fR puede ser uno de "\fBcomp\fR" (componentes), "\fBpin\fR",
"\fBsig\fR" (señales), "\fBparam\fR" (parámetros), "\fBfunct\fR"
(funciones), "\fBthread\fR" o "\fBalias\fR". El tipo "\fBall\fR"
se puede usar para mostrar elementos coincidentes de todos los tipos anteriores.
Si se omite \fIitem\fR, \fBshow\fR imprimirá todo.
.TP
\fBitem\fR
Esto es equivalente a \fBshow all [item]\fR.

.TP
\fBsave\fR [\fIitem\fR]
Imprime elementos HAL en \fIstdout\fR en forma de comandos HAL.
Estos comandos pueden ser redirigidos a un archivo y luego ejecutados
utilizando \fBhalcmd \-f\fR para restaurar la configuración guardada.
\fIitem\fR puede ser uno de los siguientes:

"\fBcomp\fR" genera un comando \fBloadrt\fR para el componente en tiempo real.

"\fBalias\fR" genera un comando \fBalias\fR para cada vinculación de alias de parámetro o pin

"\fBsig\fR" (o "\fBsignal\fR")
genera un comando \fBnewsig\fR para cada señal, y "\fBsigu\fR" genera un
comando \fBnewsig\fR para cada señal desvinculada (para uso con \fBnetl\fR y
\fBnetla\fR).

"\fBlink\fR" y "\fBlinka\fR" ambos generan comandos \fBlinkps\fR
 para cada enlace. (\fBlinka\fR incluye flechas, mientras que \fBlink\fR no.)

 "\fBnet\fR" y "\fBneta\fR" generan un comando \fBnewsig\fR para
cada señal, seguida por los comandos \fBlinksp\fR para cada pin vinculado a ese
señal. (\fBneta\fR incluye flechas.)

"\fBnetl\fR" genera una \fBnet\fR para cada señal vinculada, y "\fBnetla\fR" (o "\fBnetal\fR")
genera un comando similar usando flechas

"\fBparam\fR" (o "\fBparameter\fR)" genera un comando \fBsetp\fR para cada
parámetro.

"\fBthread\fR" genera un comando \fBaddf\fR para cada función
en cada hilo de tiempo real.

"\fBunconnectedinpins\fR genera un comando setp para cada pin de entrada 
hal desconectado.

Si \fIitem\fR es \fBallu\fR), \fBsave\fR hace
equivalente de \fBcomp\fR, \fBalias\fR, \fBsigu\fR, \fBnetla\fR, \fBparam\fR,
\fBthread\fR, y \fBunconnectedinpins\fR.

Si \fIitem\fR se omite (o \fBall\fR), \fBsave\fR hace
equivalente de \fBcomp\fR, \fBalias\fR, \fBsigu\fR, \fBnetla\fR, \fBparam\fR,
y \fBthread\fR.

.TP
\fBsource\fR \fInombre.hal\fR
Ejecuta los comandos del archivo \fInombre.hal\fR.
.TP
\fBalias\fR \fItipo\fR \fInombre\fR \fIalias\fR
Asigna "\fBalias\fR" como segundo nombre para el pin o parámetro
"nombre". Para la mayoría de las operaciones, un alias proporciona un segundo
nombre que se puede usar para referirse a un pin o parámetro, tanto
el nombre original y el alias funcionarán.
   "tipo" debe ser \fBpin\fR o \fBparam\fR.
   "nombre" debe ser un nombre existente o \fBalias\fR del tipo especificado.
.TP
\fBunalias\fR \fItipo\fR \fIalias\fR
Elimina cualquier alias del pin o alias del parámetro.
  "tipo" debe ser \fBpin\fR o \fBparam\fR
  "alias" debe ser un nombre existente o \fBalias\fR del tipo especificado.
.TP
\fBlist\fR \fItipo\fR [\fIpatrón\fR]
  Imprime los nombres de los elementos HAL del tipo especificado.
  'tipo' es '\fBcomp\fR', '\fBpin\fR', '\fBsig\fR', '\fBparam\fR', '\fBfunct\fR', o
  '\fBthread\fR'. Si se especifica 'patrón', imprime solo
  aquellos nombres que coinciden con el patrón, que puede ser un
  'shell glob'.
  Para '\fBsig\fR', '\fBpin\fR' y '\fBparam\fR', el primer patrón puede ser
  \-t\fBdatatype\fR donde tipo de datos es el tipo de datos (por ejemplo, 'float')
  en este caso, los pines, señales o parámetros listados
  están restringidos al tipo de datos dado.
  Los nombres están impresos en una sola línea, separados por espacios.
.TP
\fBlock\fR[\fIall\fR|\fItune\fR|\fInone\fR]
  Bloquea HAL hasta cierto punto.
  none - sin bloqueo.
  tune - es posible realizar algunos ajustes (\fBsetp\fR y similares).
  all - HAL completamente bloqueado.
.TP
\fBunlock\fR [\fIall\fR | \fItune\fR]
  Desbloquea HAL hasta cierto punto.
  tune - es posible realizar algunos ajustes (\fBsetp\fR y parecidos).
  all - HAL completamente desbloqueado.
.TP
\fBstatus\fR [\fItipo\fR]
  Imprime información de estado sobre HAL.
  'tipo' es '\fBlock\fR', '\fBmem\fR', o '\fBall\fR'.
  Si se omite 'tipo', se supone '\fBall\fR'.
.TP
\fBhelp\fR [\fIcomando\fR]
  Proporciona información de ayuda para el comando.
  Si se omite 'comando', lista los comandos y una breve descripción
.SH SUSTITUCIÓN
Después de leer un comando pero antes de que se ejecute, tiene lugar varios 
tipos de sustitución de variable.
.SS Variables de entorno
Las variables de entorno tienen los siguientes formatos:
.IP
\fB$ENVVAR\fR seguido de fin de línea o espacio en blanco
.IP
\fB$(ENVVAR)\fR
.SS Variables Inifiles
Las variables de Inifile están disponibles solo cuando se especificó un archivo con la
bandera halcmd \fB\-i\fR. Tienen los siguientes formatos:
.IP
\fB [SECTION]VAR\fR seguido de fin de línea o espacio en blanco
.IP
\fB [SECTION](VAR)\fR
.SH LINE CONTINUATION
El caracter barra-atras (\fB\\\fR) puede ser usado para indicar que una linea
se extiende a la siguiente. Este caracter dbe ser el ultimo
antes de nueva linea.
.SH EJEMPLOS
.SH HISTORIA
.SH BUGS
Ninguno conocido en este momento.
.SH AUTOR
Versión original de John Kasunich, como parte del proyecto LinuxCNC. Ahora
incluye contribuciones importantes de varios miembros del proyecto.
.SH REPORTANDO ERRORES
Reporte errores a
.URL http://sf.net/p/emc/bugs/ "Seguidor de errores de LinuxCNC".
.SH COPYRIGHT
Copyright \ (co 2003 John Kasunich.
.br
Este es un software libre; ver las fuentes para las condiciones de copia. No hay
garantía; ni siquiera para COMERCIABILIDAD o IDONEIDAD PARA UN PROPÓSITO PARTICULAR.
.SH "VEA TAMBIÉN"
\fBhalrun(1)\fR - una secuencia de comandos conveniente para iniciar un entorno en tiempo real,
procesar un archivo .hal o .tcl y, opcionalmente, iniciar una sesion de comandos interactiva
utilizando \fBhalcmd\fR (descrito aquí) o \fBhaltcl\fR(1).
