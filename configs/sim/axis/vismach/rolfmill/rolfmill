#!/usr/bin/python

#importar bibliotecas
from vismach import *
import hal
import math
import sys

#----------------------------------------------------------------------------------------------------------------------------------
# Comienzo y definicion

# utilizado para diámetro para versiones menores de 2.8.
# nos da acceso a valores variables desde el script vismach.
import linuxcnc
s = linuxcnc.stat()
s.poll()

# Aquí es donde definimos los pines a los que linuxcnc enviará
# datos para hacer movimientos.
# Necesitaremos 5 pines, 3 para movimiento y 2 para estadísticas de herramientas.
# tooldiameter no se usa realmente, pero si está usando 2.8 puede hacer un par de cambios
# en este archivo y descomentar la última línea en el archivo HAL.
# agregar articulaciones. La fresadora tiene 3.
c = hal.component("rolfmill")
c.newpin("jointX", hal.HAL_FLOAT, hal.HAL_IN)
c.newpin("jointY", hal.HAL_FLOAT, hal.HAL_IN)
c.newpin("jointZ", hal.HAL_FLOAT, hal.HAL_IN)

# pines de longitud de herramienta y de diámetro?
c.newpin("toollength", hal.HAL_FLOAT, hal.HAL_IN)
c.newpin("tooldiameter", hal.HAL_FLOAT, hal.HAL_IN)

# indica que los pines de loadusr están listos
c.ready()

# Utilizado para cilindro de herramienta
# se actualizará en forma y longitud por la función siguiente.
toolshape = CylinderZ(0)
toolshape = Color([1, .5, .5, .5],[toolshape])

# actualiza la forma del cilindro de la herramienta.
class HalToolCylinder(CylinderZ):
    def __init__(self, comp, *args):
        # obtener acceso a la máquina para que pueda
        # cambiar por sí misma mientras se ejecuta
        # específicamente cilindro de herramienta en este caso.
        CylinderZ.__init__(self, *args)
        self.comp = c
    def coords(self):
        # actualizar datos: no es necesario si se utiliza 2.8 y self.comp["tooldiameter"]
        # 2.7 no tiene un pin directo para el diámetro, por lo que esta es una solución alternativa.
		# El código comentado es una forma directa de hacerlo.
        s.poll() # 2.8 no necesita esto, comentarlo si usa 2.8.
        # obtener el diámetro y dividir por 2 para obtener el radio.
        rad = ( s.tool_table[s.tool_in_spindle].diameter ) # 2.7 solución alternativa
        #rad = ( self.comp["tooldiameter"] )  # solo para 2.8
        rad = rad / 2 # cambio a rad
        # esto actualiza instantáneamente el modelo de herramienta, pero la punta no se mueve
        # el punto de dibujo NO se moverá hasta que se llame a G43 H(número de herramienta).
        leng = s.tool_table[s.tool_in_spindle].zoffset 
        # Actualizar la longitud de la herramienta cuando se llama a G43 H(número de herramienta), de lo contrario
		# permanece en 0 o en el tamaño anterior.
        # descomentar si prefiero que la máquina muestre el tamaño real de la herramienta de inmediato.
        #leng = self.comp["toollength"]
        return (-leng, rad, 0, rad)


#----------------------------------------------------------------------------------------------------------------------------------
# Concepto de diseño de máquina

# El modelo sigue un diseño de árbol lógico: imagínese el árbol, con ramas y subramas
# si mueve la rama más grande, las ramas más pequeñas se moverán con ella, 
# pero si mueve las pequeñas, la rama más grande, no lo hará.
# #
# El diseño de la máquina sigue ese diseño conceptual, por lo que, por ejemplo, si mueve X, puede moverse por sí mismo, 
# pero si mueve Y, también moverá el ensamblaje X, ya que está unido al ensamblaje Y.
# por tanto, para esta máquina, el árbol se ve así:

# model
#   |
#   |---frame
#   |     |
#   |     |---base
#   |     |
#   |     |---column
#   |     |
#   |     |---top
#   |
#   |
#   |---yassembly
#   |      |
#   |      |
#   |      |---xassembly
#   |      |      |
#   |      |      |
#   |      |      |---xbase
#   |      |      |
#   |      |      |---work
#   |      |
#   |      |
#   |      |---ybase
#   |
#   |
#   |---zassembly
#           |
#           |
#           |---zframe
#           |     |
#           |     |---zbody
#           |     |
#           |     |---spindle
#           |
#           |
#           |---toolassembly
#                     |
#                     |---cat30
#                     |
#                     |---tool
#                          |
#                          |---tooltip
#                          |
#                          |---(tool cylinder function)
#
# Como puede ver, las partes más bajas deben existir primero antes de que se puedan agrupar con otras en el ensamblaje.
# Se construye, por tanto, hacia arriba desde el punto más bajo del árbol y se ensambla luego.
# Lo mismo es aplicable para cualquier diseño de máquina. Vea el ejemplo del brazo y verá que comienza
# con punta, que se agrega a la parte más grande del brazo y finalmente se agrupa con la base.


#----------------------------------------------------------------------------------------------------------------------------------
# Comenzando con bastidor fijo

# comienze a crear la base, el piso y la columna para z. La caja se centra en 0,0,0
base = BoxCentered(200, 560, 20)
# transladarlo para que la parte superior de la base esté en cero
base = Translate([base], 0,0,-10)

# columna, unida a la base en el costado.
# Box() acepta extensiones
# es decir, -100 a 100 es 200 de ancho, y el extremo derecho está en la coordenada -100.
# 		 Box(X derecha, Y más lejos, Z más bajo, X izquierda, Y más cercano, Z más alto)
column = Box(   -60,        -260,        0,          60,        -200,           400)

# agregar un bloque en la parte superior
# No es realmente necesario, pero se ve mejor con él.
# La columna desnuda pareceria un poco extraña.
top = Box(-80,-280,400, 80,-160,440)

# ahora fusionarlo en "frame" (bastidor)
frame = Collection([base, column, top])
# coloréalo grisáceo
frame = Color([.8,.8,.8,1],[frame])


#----------------------------------------------------------------------------------------------------------------------------------
# Sección de partes móviles

# Comience con X, luego Y finalmente Z con la herramienta y husillo.

# adicion de mesa X
xbase = BoxCentered(1000,200,30)
# color azul
xbase = Color([0,0,1,1], [xbase])
# Mover la mesa para que la parte superior esté en cero por ahora,
# para que el trabajo (por defecto 0,0,0) esté encima de la mesa.
xbase = Translate([xbase], 0,0, -15)

# ahora crear trabajo que sería definido por Linuxcnc.
# Sospecho que necesitaríamos definir la forma, pero no se sabe lo suficiente.
# por ahora solo crear un punto que sería el centro inferior del stock.
work = Capture()

# agrupar trabajo y xbase para que se muevan juntos.
xassembly = Collection([xbase, work])
# el trabajo ahora está definido y agrupado, y el valor predeterminado es 0,0,0, o
# actualmente en la parte superior de la mesa x.
# así que al mover el grupo de tabla hacia arriba, el trabajo ira con el.
xassembly = Translate([xassembly], 0,0, 35)

# Debe definir el movimiento de la pieza antes de que se convierta en parte de la colección.
# Debe tener argumentos, objeto en sí, c (definido anteriormente), luego finalmente escalar desde el pin a x y z.
# ya que esto se mueve únicamente en el eje X, solo x es 1, el resto es cero.
# podría usar fracciones para decir eje que se mueve en compuesto como brazo por ejemplo
# pero esta máquina es muy simple, por lo que todos los ejes estarán completamente llenos en su eje y cero en otros ejes.
xassembly = HalTranslate([xassembly], c, "jointX", 1, 0, 0)

# creación de ensamblaje Y
ybase = BoxCentered(200, 200, 10)
# colorea de verde para que podamos verlo separado del bastidor.
ybase = Color([0,1,0,1], [ybase])
# no define la traslacion para este, ya que y también mueve la mesa X.
# trasladar esto lo movería solo. Deseamos que mueva X y pieza también.

# La mesa X se mueve por la base Y, por lo que tenemos que hacer que X sea hijo de Y.
# ahora definimos la colección ybase y xassembly.
yassembly = Collection([ybase, xassembly])
# define su movimiento primero antes de transladar.
yassembly = HalTranslate([yassembly], c, "jointY", 0, 1, 0)
# Ahora que la translacion está unida con la pieza,
# moverlo hacia arriba para que quede en la base del bastidor.
yassembly = Translate([yassembly], 0,0,5)

# cabeza del husillo
# define un cilindro pequeño donde se ubicará la herramienta.
# Es de poca altura, básicamente el extremo expuesto del portaherramientas "cat30".
# imaginando que la máquina usa cat30.
cat30 = CylinderZ(0, 30, 20, 40) # tronco cono ancho arriba, estrecho abajo
# color rojo, avisando !peligro, herramienta!
cat30 = Color([1,0,0,1], [cat30])

# Defina la herramienta y tome la información del modelo de linuxcnc
# La punta está inicialmente en vismach "world" 0,0,0.
# lo que hace que sea el lugar donde está la linea de dibujo en el mundo, entonces
# se puede ver dónde está la punta de la herramienta.
# Primero, capturarlo para que podamos usarlo y moverlo a donde
# esté el final definido de la herramienta.
tooltip = Capture()


# Ahora que tenemos la punta de herramientas, vamos a adjuntarlo a la función del cilindro (ver arriba)
# crea un cilindro y luego translada la punta al final del mismo.
tool = Collection([
	Translate([HalTranslate([tooltip], c, "toollength", 0, 0, -1)], 0, 0, 0),
	HalToolCylinder(toolshape)
	])

# Como la herramienta está definida, la adjuntemos a cat30
# Grupo cat30 y punta
toolassembly = Collection([cat30, tool])
# ahora que la herramienta está conectada correctamente, podemos moverla
# y la herramienta se "moverá" con ella ahora.
# PERO necesitamos construir el resto de la cabeza de tal manera que TOP de la cabeza se defina como Z cero.
# Moverlo para que se posicione en la parte inferior del cuerpo del husillo.
toolassembly = Translate([toolassembly],0,0,-120)


# Comienzo de la construccion del cabezal del montaje Z, incluido el husillo y el soporte
# La parte top está en cero, ya que se quiere que top se defina como Z home.
spindle = CylinderZ(-100, 60, 0, 60) # top is at zero
# definir el resto de la cabeza usando Box
zbody = Box(-30, -200, 0, 30, 0, -100)

# fusionar el ensamblaje z
zframe = Collection([zbody, spindle])
# color amarillo
zframe = Color([1,1,0,1], [zframe])

# Ahora que todas las partes están creadas, agrupémoslas y finalmente hagamos el movimiento Z
zassembly = Collection([zframe, toolassembly])
# definir movimiento Z
zassembly = HalTranslate([zassembly], c, "jointZ", 0, 0, 1)
# Ahora que el movimiento está definido,
# podemos moverlo a la posición home Z.
zassembly = Translate([zassembly], 0,0, 400)

#----------------------------------------------------------------------------------------------------------------------------------
# Reuniéndolo todo y terminando el modelo

# Ensamblar todo en un solo modelo.
# xassembly ya está incluido en yassembly, así que no es necesario que se incluya.
model = Collection([frame, yassembly, zassembly])

# Finalmente, llame a main() con parámetros para linuxcnc.
# lista de parámetros:
# el nombre del modelo final debe incluir todas las partes que desea usar
# punta de herramienta (especial para la inclusión de tooltip)
# trabajo (especial para la inclusión de piezas de trabajo)
# tamaño de la pantalla (más grande significa más alejado para mostrar más máquina)
# lat y lon es donde está el punto de vista.
main(model, tooltip, work, 600, lat=-75, lon=215)
















