
(info: múltiples círculos en el radio R, use 0 para el valor actual)
; Notas:
; 1) eje z no alterado (permanece en z actual)
; 2) para corte interior de polígonos (fnum == 0):
; comenzar con rfracción negativa
; y gradualmente aumente la fracción a cero a medida que el programa ejecuta 
; círculos
; 3) para corte de polígono exterior (fnum == 1):
; comenzar con rfracción positiva
; y gradualmente disminuye a cero a medida que el programa ejecuta
; círculos
;
; Método alternativo para polígonos:
; 1) use #<radius>=0 y trote hasta la posición de inicio segura
; 2) use #<revs>=1, ejecute el programa para una revolución
; 3) Ejecute el programa repetidamente y haga jog manualmente x (radio)
; antes de que cada programa comience a aumentar/disminuir
; radio actual para polígono interior/exterior respectivamente
o<circles> sub
     #<radius> = #1 (=  1 R  0==>current)
     #<aspeed> = #2 (=  8 aspeed: RPM)
     #<lspeed> = #3 (= 10 lspeed: units/sec)
       #<revs> = #4 (=  1 +/- Revolutions)

      #<c> = #<_c> ;starting value
#<ctarget> = [#<c> + #<revs> * 360]
  #<arate> = [#<aspeed> * 360]

m111 ;clear prior info messages
o<if1> if [#<radius> EQ 0]
       #<ref_radius> = #<_x> ;use current x
o<if1> else
       #<ref_radius> = #<radius>
       f#<lspeed> g1 x#<ref_radius>
o<if1> endif
(debug, ref_radius=#<ref_radius>)

m68 e0 q#<ref_radius> ; set ref_radius for eoffsets

f#<arate> g1 c#<ctarget> ; circles at arate

o<circles> endsub
